#+TITLE: init.el
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

* Table of contents :toc:
- [[#emacs-startup][emacs startup]]
  - [[#shift-theme-variables-to-customel-make-sure-to-create-it-if-it-does-not-exist][shift theme variables to ~custom.el~, make sure to create it if it does not exist]]
  - [[#emacs-startup-performance][emacs startup performance]]
- [[#initialize-package-sources][Initialize package sources]]
  - [[#packageel][Package.el]]
  - [[#straightel-make-sure-to-later-remove-packageel][straight.el: make sure to later remove package.el]]
  - [[#enable-native-comp-for-packages][enable native comp for packages]]
  - [[#quelpa][quelpa]]
  - [[#setting-up-paths][Setting up paths]]
- [[#customizing-the-editor-and-appearence][Customizing the Editor and Appearence]]
  - [[#dashboard][Dashboard]]
  - [[#page-break-lines][Page break lines]]
  - [[#highlight-current-line][highlight current line]]
  - [[#properly-maximize-windws-emacs][properly maximize windws emacs]]
  - [[#theme][theme]]
  - [[#disable-menubar][Disable Menubar]]
  - [[#disable-toolbar][Disable Toolbar]]
  - [[#disable-scrollbar][disable scrollbar]]
  - [[#all-the-icon-fonts][All the icon fonts]]
  - [[#line-numbers][Line Numbers]]
  - [[#doom-modeline][Doom modeline]]
  - [[#loading-the-theme][Loading the theme]]
  - [[#fonts][Fonts]]
  - [[#evil-mode][Evil mode]]
  - [[#undo-system][Undo system]]
  - [[#padding][Padding]]
  - [[#perspective][perspective]]
  - [[#brackets][brackets]]
  - [[#tramp][tramp]]
- [[#hook-to-tangle-on-save][Hook to tangle on save]]
- [[#org-mode][Org mode:]]
  - [[#org-mode-indent][org mode indent]]
  - [[#org-blocks-insert-mode][Org blocks insert mode]]
  - [[#snippets][snippets:]]
  - [[#org-tempo-for-all-the-beautiful-snippets][org tempo for all the beautiful snippets:]]
  - [[#superstar-for-some-pretty-symbols][Superstar for some pretty symbols]]
  - [[#org-toc][org-toc]]
  - [[#company-org-block][company org block]]
  - [[#org-bable-load-all-languages][org-bable load all languages]]
  - [[#org-roam][org roam]]
- [[#tools][Tools]]
  - [[#vterm][vterm]]
  - [[#auto-update-with-emacs][auto update with emacs]]
  - [[#telega][telega]]
  - [[#emacs-pdf-tools][emacs pdf tools]]
  - [[#mu4e][mu4e]]
  - [[#treemacs][treemacs]]
  - [[#elcord][elcord]]
  - [[#shackle][Shackle]]
  - [[#pacman][pacman]]
  - [[#popperel-todo][popper.el TODO]]
  - [[#using-exwm][Using EXWM]]
  - [[#erc-server-settings][ERC server settings]]
  - [[#elfeed-rss-reader][elfeed RSS reader]]
- [[#language-and-completion-support][Language and completion support]]
  - [[#completion-engines][completion engines:]]
  - [[#using-tabnine-for-completion][using tabnine for completion]]
  - [[#emoji-mode][emoji mode]]
  - [[#parentheses-completion][Parentheses Completion]]
  - [[#projectile][Projectile]]
  - [[#languages-and-lsp-mode][languages and lsp-mode]]
  - [[#which-key][which key]]
- [[#prevent-saving-to-x-clipboard-manager][prevent "saving to x clipboard manager]]
- [[#prevent-warnings-buffer][prevent *warnings* buffer]]
- [[#emacs-typing-latency][emacs typing latency]]
- [[#disable-backups][Disable backups]]
- [[#emacs-fixing-some-window-stuff][emacs fixing some window stuff]]
- [[#restart-emacs-package][restart emacs package]]

* emacs startup
** shift theme variables to ~custom.el~, make sure to create it if it does not exist
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load-file (expand-file-name "custom.el" user-emacs-directory))
  (setq gc-cons-threshold 100000000)
#+end_src
** emacs startup performance
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    ;; (setq gc-cons-threshold (* 50 1000 1000))
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (defun efs/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
			(time-subtract after-init-time before-init-time)))
	       gcs-done))

    (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

* Initialize package sources
** Package.el
#+begin_src emacs-lisp

 ;; Initialize package sources
    (require 'package)

  (setq package-archives '(("melpa"  . "https://melpa.org/packages/")
                         ("org"    . "https://orgmode.org/elpa/")
                         ("gnu"    . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

      ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)


#+end_src
** straight.el: make sure to later remove package.el
#+begin_src emacs-lisp
  ;; (defvar bootstrap-version)
  ;; (let ((bootstrap-file
  ;;        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  ;;       (bootstrap-version 5))
  ;;   (unless (file-exists-p bootstrap-file)
  ;;     (with-current-buffer
  ;;         (url-retrieve-synchronously
  ;;          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
  ;;          'silent 'inhibit-cookies)
  ;;       (goto-char (point-max))
  ;;       (eval-print-last-sexp)))
  ;;   (load bootstrap-file nil 'nomessage))

  ;; (straight-use-package 'use-package) ; make sure use package is installed
  ;; (use-package el-patch
  ;;   :ensure t)                   ;and now we wi
  ;;ll have use package here
#+end_src
note: Users of Emacs versions >= 27 will want to add:
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src
** enable native comp for packages
#+begin_src emacs-lisp
  (setq comp-deferred-compilation t)
#+end_src
** quelpa
https://github.com/quelpa/quelpa#installation
#+begin_src emacs-lisp
  (use-package quelpa :ensure t)
#+end_src
** Setting up paths
#+begin_src emacs-lisp
  (use-package exec-path-from-shell :ensure t)
  ;; (when (memq window-system '(mac ns x))
  ;;   (exec-path-from-shell-initialize))
  ;; (when (daemonp)
  ;;   (exec-path-from-shell-initialize))
  ;; (exec-path-from-shell-copy-env "export ORACLE_HOME=/opt/oracle/product/18c/dbhomeXE")

#+end_src
* Customizing the Editor and Appearence
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard :ensure t
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    ;; Content is not centered by default. To center, set
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-startup-banner `logo) ;; use standard emacs logo as banner
    ;;(setq dashboard-startup-banner 'logo)
    ;;(setq dashboard-startup-banner "~/.emacs.d/emacs-dash3.png")  ;; use custom image as banner
    (setq dashboard-center-content t)
    (setq dashboard-set-navigator t)
    (setq dashboard-page-separator  "\n\f\n")
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 5)
                            (projects . 3)
                            ))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book"))))

  ;;(add-hook 'after-init-hook (lambda () (switch-to-buffer "*dashboard*")))
                                          ; for emacsclient
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** Page break lines
#+begin_src emacs-lisp
  (use-package page-break-lines :ensure t)
#+end_src
** highlight current line
#+begin_src emacs-lisp
  (global-hl-line-mode +1)
#+end_src

** properly maximize windws emacs
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src
** theme
#+begin_src emacs-lisp
  ;; (use-package dracula- ensure t)
  (use-package doom-themes :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-dracula  t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src
** Disable Menubar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src
** Disable Toolbar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src
** disable scrollbar
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src
** All the icon fonts
#+begin_src emacs-lisp
  (use-package all-the-icons :ensure t)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src
** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline :ensure t)
  (doom-modeline-mode 1)
#+end_src

** Loading the theme
#+begin_src emacs-lisp
  ;;(load-theme 'doom-dracula t)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "FiraCode Nerd Font 11"
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "FiraCode Nerd Font  11"
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "FiraCode Nerd Font 11"
                      :weight 'medium)
  ;; Makes commented text italics (working in emacsclient but not emacs)
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  ;; Makes keywords italics (working in emacsclient but not emacs)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font 11"))
  ;; changes certain keywords to symbols, such as lamda!
  (setq global-prettify-symbols-mode t)

#+end_src
** Evil mode
https://github.com/emacs-evil/evil
Evil is an extensible vi layer for Emacs. It emulates the main features of Vim,
*** Default
#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general :ensure t
    :after evil
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))


#+end_src
*** Evil args
#+begin_src emacs-lisp
  (use-package evil-args :ensure t)

  ;; bind evil-args text objects
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

  ;; bind evil-forward/backward-args
  (define-key evil-normal-state-map "L" 'evil-forward-arg)
  (define-key evil-normal-state-map "H" 'evil-backward-arg)
  (define-key evil-motion-state-map "L" 'evil-forward-arg)
  (define-key evil-motion-state-map "H" 'evil-backward-arg)

  ;; bind evil-jump-out-args
  (define-key evil-normal-state-map "K" 'evil-jump-out-args)
#+end_src
*** Evil intent plus
#+begin_src emacs-lisp
  (use-package evil-indent-plus :ensure t)
#+end_src
*** Evil Snipe
#+begin_src emacs-lisp
  (use-package evil-snipe :ensure t)
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1)
#+end_src
** Undo system
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
#+end_src

** Padding
#+begin_src emacs-lisp
  (push '(internal-border-width . 10) default-frame-alist)
#+end_src

** perspective
https://github.com/nex3/perspective-el
The Perspective package provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers like Awesome and XMonad, and Spaces on the Mac.
Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the xref ring. This makes it easy to work on many separate projects without getting lost in all the buffers. Switching to a perspective activates its window configuration, and when in a perspective, only its buffers are available (by default).
Each Emacs frame has a distinct list of perspectives.
Perspective supports saving its state to a file, so long-lived work sessions may be saved and recovered as needed.

To activate perspective use (persp-mode). This creates a single default main perpsective.

Commands are all prefixed by C-x x by default. To change the prefix key, customize persp-mode-prefix-key. Additionally, creating a key binding for persp-mode-map will also activate the prefix.

Here are the main commands defined in persp-mode-map:

s — persp-switch: Query a perspective to switch to, or create
` — persp-switch-by-number: Switch to perspective by number, or switch quickly using numbers 1, 2, 3.. 0 as prefix args; note this will probably be most useful with persp-sort set to 'created
k — persp-remove-buffer: Query a buffer to remove from current perspective
c — persp-kill : Query a perspective to kill
r — persp-rename: Rename current perspective
a — persp-add-buffer: Query an open buffer to add to current perspective
A — persp-set-buffer: Add buffer to current perspective and remove it from all others
b - persp-switch-to-buffer: Like switch-to-buffer; includes all buffers from all perspectives; changes perspective if necessary
i — persp-import: Import a given perspective from another frame.
n, <right> — persp-next: Switch to next perspective
p, <left> — persp-prev: Switch to previous perspective
C-s — persp-state-save: Save all perspectives in all frames to a file
C-l — persp-state-load: Load all perspectives from a file

#+begin_src emacs-lisp
  ;; (use-package perspective :ensure t
  ;;   :bind
  ;;   ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
  ;;   :init
  ;;   (persp-mode))
#+end_src

** brackets
#+begin_src emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-style 'parenthesis)
#+end_src

** tramp
#+begin_src emacs-lisp
                                          ; (use-package tramp :ensure t)
                                          ; (require 'tramp)
#+end_src
* Hook to tangle on save
#+begin_src emacs-lisp
  (defun f2k--tangle-all-org-on-save-h ()
    "Tangle org files on save."
    (if (string= (file-name-extension (buffer-file-name)) "org")
        (org-babel-tangle)))

  (add-hook 'after-save-hook #'f2k--tangle-all-org-on-save-h)

#+end_src
* Org mode:
#+begin_src emacs-lisp
  (use-package org :ensure t)
#+end_src
** org mode indent
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src
** Org blocks insert mode
Switch to org edit mode when pressing `i` insert key
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
    (add-hook 'evil-insert-state-entry-hook
      (lambda ()
        (when (org-in-src-block-p)
          (org-edit-special)
          (evil-insert-state)))
      0 t)))
#+end_src
** snippets:
*** yas-snippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs '("~/dotfiles/emacs.d-gnu/snippets"))
    )
  (require 'yasnippet)
  (yas-global-mode 1)

#+end_src
*** doom snippets
see  https://github.com/hlissner/doom-snippets
#+begin_src emacs-lisp
  ;; (use-package doom-snippets
  ;;   :ensure t
  ;;   :load-path "/home/drishal/.emacs.d/custom-repos/doom-snippets"
  ;;   :after yasnippet)
#+end_src
** org tempo for all the beautiful snippets:

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
** Superstar for some pretty symbols
#+begin_src emacs-lisp
  (use-package org-superstar :ensure t)
  (require 'org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src
** org-toc
#+begin_src emacs-lisp
  (use-package toc-org :ensure t)
  (add-hook 'org-mode-hook #'toc-org-enable)

#+end_src
** company org block
#+begin_src emacs-lisp
  (use-package company-org-block
    :ensure t
    :custom
    (company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline
    :hook ((org-mode . (lambda ()
                         (setq-local company-backends '(company-org-block))
                         (company-mode +1)))))
#+end_src
** org-bable load all languages
https://orgmode.org/worg/org-contrib/babel/languages/index.html
#+begin_src emacs-lisp
  (require 'ob-comint)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (emacs-lisp . t)
     (python . t)
     (shell . t)
                                          ;(rust . t)
     ))

  (setq org-babel-python-command "python3")
#+end_src
** org roam
#+begin_src
  (use-package org-roam :ensure t)
#+end_src

* Tools
** vterm
#+begin_src emacs-lisp
  (use-package vterm :ensure t
    :config
    (setq vterm-shell "/bin/zsh")
    ;; (set-popup-rule! "^\\*vterm" :size 0.25 :vslot -4 :select t :quit nil :ttl 0)
    (setq vterm-timer-delay 0)
    )
#+end_src
** auto update with emacs
#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))

#+end_src
** telega
#+begin_src emacs-lisp
  (use-package visual-fill-column :ensure t)
  (use-package telega :ensure t
    :commands (telega))

#+end_src
** emacs pdf tools
#+begin_src emacs-lisp
   ;(pdf-loader-install)
  ;(pdf-tools-install)
  (use-package pdf-tools :ensure t)
#+end_src
** mu4e
https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Mail-01.org
#+begin_src emacs-lisp
  ;; (use-package mu4e
  ;;   :ensure nil
  ;;   :load-path "/usr/share/emacs/site-lisp/mu4e/"
  ;;   ;; :defer 20 ; Wait until 20 seconds after startup
  ;;   :config

  ;;   ;; This is set to 't' to avoid mail syncing issues when using mbsync
  ;;   (setq mu4e-change-filenames-when-moving t)

  ;;   ;; Refresh mail using isync every 10 minutes
  ;;   (setq mu4e-update-interval (* 10 60))
  ;;   (setq mu4e-get-mail-command "mbsync -a")
  ;;   (setq mu4e-maildir "~/Mail")

  ;;   (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  ;;   (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  ;;   (setq mu4e-refile-folder "/[Gmail]/All Mail")
  ;;   (setq mu4e-trash-folder  "/[Gmail]/Trash")

  ;;   (setq mu4e-maildir-shortcuts
  ;;         '((:maildir "/Inbox"    :key ?i)
  ;;           (:maildir "/[Gmail]/Sent Mail" :key ?s)
  ;;           (:maildir "/[Gmail]/Trash"     :key ?t)
  ;;           (:maildir "/[Gmail]/Drafts"    :key ?d)
  ;;           (:maildir "/[Gmail]/All Mail"  :key ?a))))


#+end_src
** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   t
            treemacs-file-event-delay                5000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))
#+end_src
** elcord
#+begin_src emacs-lisp
  (use-package elcord :ensure t)
#+end_src
** Shackle
#+begin_src emacs-lisp
  (use-package shackle
    :ensure t
    ;; :if (not (bound-and-true-p disable-pkg-shackle))
    :config
    (progn
      (setq shackle-lighter "")
      (setq shackle-select-reused-windows nil) ; default nil
      (setq shackle-default-alignment 'below) ; default below
      (setq shackle-default-size 0.4) ; default 0.5

      (setq shackle-rules
            ;; CONDITION(:regexp)            :select     :inhibit-window-quit   :size+:align|:other     :same|:popup
            '((compilation-mode              :select nil                                               )
              ("*undo-tree*"                 :select t                          :size 0.25 :align right)
              ("\\*vterm.*\\*"  :regexp t    :select t                          :size 0.4  :align below)
              ;; ("*eshell*"                    :select t                          :other t               )
              ;;         ("*Shell Command Output*"      :select nil                                               )
              ;;         ("\\*Async Shell.*\\*" :regexp t :ignore t                                                 )
              ;;         (occur-mode                    :select nil                                   :align t    )
              ;;         ("*Help*"                      :select t   :inhibit-window-quit t :other t               )
              ;;         ("*Completions*"                                                  :size 0.3  :align t    )
              ;;         ("*Messages*"                  :select nil :inhibit-window-quit t :other t               )
              ;;         ("\\*[Wo]*Man.*\\*"    :regexp t :select t   :inhibit-window-quit t :other t               )
              ;;         ("\\*poporg.*\\*"      :regexp t :select t                          :other t               )
              ;;         ("\\`\\*helm.*?\\*\\'"   :regexp t                                    :size 0.3  :align t    )
              ;;         ("*calendar*"                  :select t                          :size 0.5  :align below)
              ;;         ("*info*"                      :select t   :inhibit-window-quit t                         :same t)
              ;;         (magit-status-mode             :select t   :inhibit-window-quit t                         :same t)
              ;;         (magit-log-mode                :select t   :inhibit-window-quit t                         :same t)
              ))

      (shackle-mode 1)))


  (provide 'setup-shackle)

#+end_src
** pacman
#+begin_src emacs-lisp
  (use-package pacmacs :ensure t)
#+end_src
** popper.el TODO
https://github.com/karthink/popper

** Using EXWM
#+begin_src emacs-lisp
  (use-package exwm :ensure t)
                                          ;(require 'exwm)
                                          ;(require 'exwm-config)
                                          ;(exwm-config-default)

#+end_src
** ERC server settings
#+begin_src emacs-lisp
  (require 'erc)
  (setq erc-default-server "irc.libera.chat")
  (add-hook 'window-configuration-change-hook
            '(lambda ()
               (setq erc-fill-column (- (window-width) 2))))
#+end_src

** elfeed RSS reader
#+begin_src emacs-lisp
  (use-package elfeed :ensure t)
  (setq elfeed-feeds
        '(
          ("https://archlinux.org/feeds/news/" Arch Linux)
          ("https://weekly.nixos.org/feeds/all.rss.xml" NixOS)
          ("https://www.phoronix.com/rss.php" Phoronix)
          ("https://suckless.org/atom.xml" suckless)
          ("https://micronews.debian.org/feeds/feed.rss" Debian)
          )
        )
#+end_src

* Language and completion support
** completion engines:
*** company mode
#+begin_src emacs-lisp
  (use-package company :ensure t)

  ;; (use-package company-lsp
  ;;     :ensure t
  ;;     :config
  ;;     (push 'company-lsp company-backends))

  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0) ;; default is 0.2

#+end_src
** using tabnine for completion
#+begin_src emacs-lisp
  ;;    (use-package company-tabnine :ensure t)
  ;;  (require 'company-tabnine)
  ;; (add-to-list 'company-backends #'company-tabnine)
#+end_src

** emoji mode
#+begin_src emacs-lisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode))
#+end_src
** Parentheses Completion
#+begin_src emacs-lisp
  (use-package smartparens :ensure t)
  (require 'smartparens)
  ;; (add-hook 'smartparens-mode)
  (smartparens-global-mode t)
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile :ensure t)
  (require 'smartparens-config)
#+end_src

*** vertico and orderless
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico :ensure t
    :init
    (vertico-mode)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Use the `orderless' completion style. Additionally enable
  ;; `partial-completion' for file path expansion. `partial-completion' is
  ;; important for wildcard support. Multiple files can be opened at once
  ;; with `find-file' if you enter a wildcard. You may also give the
  ;; `initials' completion style a try.
  (use-package orderless :ensure t
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist :ensure t
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs :ensure t
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

#+end_src

*** consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult :ensure t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch)
           :map isearch-mode-map
           ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer.
    ;; This is relevant when you use the default completion UI,
    ;; and not necessary for Vertico, Selectrum, etc.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

#+end_src

*** helm completion
#+begin_src emacs-lisp

  (use-package helm
    :ensure t
                                          ;:config

    )


  ;; (global-set-key (kbd "M-x") #'helm-M-x)
  ;; (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  ;; (global-set-key (kbd "C-x C-f") #'helm-find-files)

#+end_src

*** ido
#+begin_src emacs-lisp
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)
#+end_src

*** ivy
#+begin_src emacs-lisp
  ;; (ivy-mode)
  ;; (setq ivy-use-virtual-buffers t)
  ;; (setq enable-recursive-minibuffers t)
  ;; ;; enable this if you want `swiper' to use it
  ;; ;; (setq search-default-mode #'char-fold-to-regexp)
  ;; (global-set-key "\C-s" 'swiper)
  ;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
  ;; (global-set-key (kbd "<f6>") 'ivy-resume)
  ;; (global-set-key (kbd "M-x") 'counsel-M-x)
  ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;; (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
  ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  ;; (global-set-key (kbd "C-c g") 'counsel-git)
  ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;; (global-set-key (kbd "C-c k") 'counsel-ag)
  ;; (global-set-key (kbd "C-x l") 'counsel-locate)
  ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  ;; (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src
** languages and lsp-mode
https://emacs-lsp.github.io/lsp-mode/
and also https://emacs-lsp.github.io/lsp-mode/page/languages/
*** General Setup
#+begin_src emacs-lisp
  (use-package flycheck :ensure t)
  (use-package lsp-mode :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (rust-mode  . lsp)
           (html-mode  . lsp)
           (c-mode  . lsp)
           (c++-mode  . lsp)
           (css-mode . lsp)
           (zig-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
           (sh-mode . lsp)
           (lua-mode . lsp)
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode :ensure t)

  (setq lsp-ui-doc-enable nil)
  ;;(use-package lsp-treemacs :ensure t)
                                          ; (add-hook 'prog-mode-hook 'lsp)

  ;; (setq lsp-use-plists t)
  ;;(setq lsp-idle-delay 0.500)
#+end_src
*** Sqlplus
#+begin_src emacs-lisp
                                          ; (use-package sqlplus-mode :ensure t)

                                          ;   (let ((oracle-home (shell-command-to-string ". ~/.profile; echo -n $ORACLE_HOME"))) (if oracle-home (setenv "ORACLE_HOME" oracle-home)) (setenv "PATH" (concat (getenv "PATH") (format "%s/%s" oracle-home "bin"))) (add-to-list 'exec-path (format "%s/%s" oracle-home "bin")) ) This assumes that you’re using ZSH. Obviously, you should change the .zshrc reference to the
#+end_src
*** sql
#+begin_src emacs-lisp
  (require 'sql)
  (defalias 'sql-get-login 'ignore)
#+end_src
*** yaml-mode
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src
*** python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))  ; or lsp-deferred

#+end_src
*** Haskell
**** haskell mode
#+begin_src emacs-lisp
  (use-package haskell-mode :ensure t)
#+end_src
*** Fish
#+begin_src emacs-lisp
  (use-package fish-mode :ensure t)
#+end_src
*** nix
#+begin_src emacs-lisp
  (use-package nix-mode :ensure t
    :mode "\\.nix\\'")
#+end_src
*** java
#+begin_src emacs-lisp
  ;(use-package lsp-java :ensure t)
  ;(add-hook 'java-mode-hook #'lsp)
#+end_src
*** lua
#+begin_src emacs-lisp
   (use-package lua-mode
    :ensure t
    :mode "\\.lua$"
    :interpreter "lua"
    :hook (lua-mode . set-company-backends-for-lua)
    :config
    (setq lua-indent-level 4)
    (setq lua-indent-string-contents t)
    (setq lua-prefix-key nil)
    )
#+end_src
*** web stuff
***** web mode
#+begin_src emacs-lisp
  (use-package web-mode :ensure t)
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+end_src
*** lsp
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              ;; Use spaces, not tabs.
              (setq indent-tabs-mode nil)
              ;; Keep M-TAB for `completion-at-point'
              (define-key flyspell-mode-map "\M-\t" nil)
              ;; Pretty-print eval'd expressions.
              (define-key emacs-lisp-mode-map
                          "\C-x\C-e" 'pp-eval-last-sexp)
              ;; Recompile if .elc exists.
              (add-hook (make-local-variable 'after-save-hook)
                        (lambda ()
                          (byte-force-recompile default-directory)))
              (define-key emacs-lisp-mode-map
                          "\r" 'reindent-then-newline-and-indent)))
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode) ;; Requires Ispell
#+end_src

*** C/C++ mode
#+begin_src emacs-lisp
                                          ;(add-hook 'c-mode-hook #'lsp)
                                          ;(add-hook 'c++-mode-hook #'lsp)
#+end_src
*** rust mode
#+begin_src emacs-lisp
  (use-package rust-mode :ensure t)
#+end_src
*** zig
#+begin_src emacs-lisp
  (use-package zig-mode :ensure t)
  (setq lsp-zig-zls-executable "~/zls/zls")
#+end_src
** which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " ))
  (which-key-mode)
#+end_src

* prevent "saving to x clipboard manager
#+begin_src emacs-lisp
  (setq x-select-enable-clipboard-manager nil)
#+end_src

* prevent *warnings* buffer
#+begin_src emacs-lisp
  (setq-default warning-minimum-level :error)
#+end_src

* emacs typing latency
#+begin_src emacs-lisp
  ;;(setq redisplay-dont-pause t)
#+end_src
* Disable backups
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

* emacs fixing some window stuff
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;; (add-to-list 'default-frame-alist '(fullscreen . fullheight))
#+end_src

* restart emacs package
#+begin_src emacs-lisp
  (use-package restart-emacs :ensure t)
#+end_src
