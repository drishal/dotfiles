#+TITLE: init.el
#+PROPERTY: header-args :tangle ~/.config/emacs/init.el

* Table of contents :toc:
- [[#emacs-startup][emacs startup]]
  - [[#just-make-sure-to-run-this-once][Just make sure to run this once]]
  - [[#shift-theme-variables-to-customel-make-sure-to-create-it-if-it-does-not-exist][shift theme variables to ~custom.el~, make sure to create it if it does not exist]]
  - [[#emacs-startup-performance][emacs startup performance]]
- [[#initialize-package-sources][Initialize package sources]]
  - [[#packageel][Package.el]]
  - [[#straightel][Straight.el]]
  - [[#elpacael][elpaca.el]]
  - [[#enable-native-comp-for-packages][enable native comp for packages]]
  - [[#setting-up-paths][Setting up paths]]
- [[#customizing-the-editor-and-appearence][Customizing the Editor and Appearence]]
  - [[#fonts][Fonts]]
  - [[#opacityblur][opacity/blur]]
  - [[#bookmarks-file][bookmarks file]]
  - [[#recents][recents]]
  - [[#rainbow-mode-for-colors][rainbow mode for colors]]
  - [[#smooth-scrolling][smooth scrolling]]
  - [[#dashboard][Dashboard]]
  - [[#highlight-current-line][highlight current line]]
  - [[#properly-maximize-windws-emacs][properly maximize windws emacs]]
  - [[#disable-toolbar][Disable Toolbar]]
  - [[#page-break-lines][Page break lines]]
  - [[#all-the-icon-fonts][All the icon fonts]]
  - [[#nerd-icons][Nerd-icons]]
  - [[#no-blinking-cursor][no blinking cursor]]
  - [[#theme][theme]]
  - [[#disable-menubar][Disable Menubar]]
  - [[#disable-scrollbar][disable scrollbar]]
  -  [[#line-numbers][Line Numbers]]
  - [[#modeline][Modeline]]
  - [[#evil-mode][Evil mode]]
  - [[#undo-system][Undo system]]
  - [[#padding][Padding]]
  - [[#brackets][brackets]]
  - [[#magit][magit]]
  - [[#some-indentation-settings][Some indentation settings]]
  - [[#y-for-yes][y for yes]]
- [[#hook-to-tangle-on-save][Hook to tangle on save]]
- [[#org-mode][Org mode:]]
  - [[#org-mode-indent][org mode indent]]
  - [[#org-mode-disable-begin_example-blocks][org mode disable begin_example blocks]]
  - [[#org-blocks-insert-mode][Org blocks insert mode]]
  - [[#snippets][snippets:]]
  - [[#org-tempo-for-all-the-beautiful-snippets][org tempo for all the beautiful snippets:]]
  - [[#org-modern][org modern]]
  - [[#org-toc][org-toc]]
  - [[#fixing-org-blocks][fixing org blocks]]
  - [[#company-org-block][company org block]]
  - [[#org-bable-load-all-languages][org-bable load all languages]]
  - [[#org-bable-evaulate][org bable evaulate]]
  - [[#org-preserve-line-breaks][org preserve line breaks]]
  - [[#org-roam][org roam]]
  - [[#org-export-settings][org export settings]]
  - [[#org-html-themeify][org-html-themeify]]
  - [[#org-present][org present]]
  - [[#image-settings][Image settings]]
- [[#tools][Tools]]
  - [[#vterm][vterm]]
  - [[#bongo][Bongo]]
  - [[#minimap][Minimap]]
  - [[#mentor-torrent-client][Mentor Torrent client]]
  - [[#selectrical-mode][selectrical mode]]
  - [[#telega][telega]]
  - [[#emacs-pdf-tools][emacs pdf tools]]
  - [[#mu4e][mu4e]]
  - [[#treemacs][treemacs]]
  - [[#neotree][neotree]]
  - [[#dired][dired]]
  - [[#elcord][elcord]]
  - [[#shackle][Shackle]]
  - [[#pacman][pacman]]
  - [[#popperel-todo][popper.el TODO]]
  - [[#erc-server-settings][ERC server settings]]
  - [[#elfeed-rss-reader][elfeed RSS reader]]
  - [[#multi-cursor][Multi cursor]]
  - [[#ement-el-matrix-client][ement el matrix client]]
- [[#language-and-completion-support][Language and completion support]]
  - [[#completion-engines][completion engines:]]
  - [[#treesitter][treesitter]]
  - [[#emoji-mode][emoji mode]]
  - [[#parentheses-completion][Parentheses Completion]]
  - [[#projectile][Projectile]]
  - [[#vertico-and-orderless][vertico and orderless]]
  - [[#languages-and-lsp-mode][languages and lsp-mode]]
  - [[#which-key][which key]]
- [[#prevent-saving-to-x-clipboard-manager][prevent "saving to x clipboard manager]]
- [[#prevent-warnings-spam][prevent *warnings* spam]]
- [[#elaca-stuff-for-dashboard][elaca stuff for dashboard]]

* emacs startup
** Just make sure to run this once
#+begin_src bash :tangle no
touch ~/.emacs.d/custom.el
#+end_src

** shift theme variables to ~custom.el~, make sure to create it if it does not exist
#+begin_src emacs-lisp
(let ((filepath "~/.config/emacs/custom.el"))
  (when (not (file-exists-p filepath))
    (write-region "" nil filepath)))
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load-file (expand-file-name "custom.el" user-emacs-directory))
(setq gc-cons-threshold 100000000)
#+end_src
** emacs startup performance
#+begin_src emacs-lisp :tangle no 
;; The default is 800 kilobytes.  Measured in bytes.
;; (setq gc-cons-threshold (* 50 1000 1000))
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
	   (format "%.2f seconds"
		   (float-time
		    (time-subtract after-init-time before-init-time)))
	   gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

* Initialize package sources
** Package.el
#+begin_src emacs-lisp :tangle no
  
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(setq use-package-always-ensure t)

#+end_src

** Straight.el
Note: This is not currently tangled 
#+begin_src emacs-lisp :tangle no
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq package-enable-at-startup nil)
  (straight-use-package 'use-package)
  ;; (setq straight-recipes-gnu-elpa-use-mirror t)
  (setq straight-recipes-emacsmirror-use-mirror t)
#+end_src

** elpaca.el
https://github.com/progfolio/elpaca

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))


(setq package-enable-at-startup nil)
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))


(use-package org :demand t)
;; Block until current queue processed.
(elpaca-wait)

#+end_src
** enable native comp for packages
#+begin_src emacs-lisp
;; (setq comp-deferred-compilation t)
(setq native-comp-deferred-compilation t)
#+end_src

** Setting up paths
*** main path from shell
#+begin_src emacs-lisp 
(use-package exec-path-from-shell :demand t)
(elpaca-wait)
(when (daemonp)
  (exec-path-from-shell-initialize))
#+end_src
*** .local/bin path 
#+begin_src emacs-lisp
(add-to-list 'exec-path "~/.local/bin")
(setenv "PATH" (concat (getenv "PATH")":~/.local/bin"))
#+end_src


*** adding cargo to path
#+begin_src emacs-lisp
(add-to-list 'exec-path "~/.cargo/bin")
(setenv "PATH" (concat (getenv "PATH")":~/.cargo/bin"))
#+end_src
* Customizing the Editor and Appearence
** Fonts
remove/add tangle no to whatever font you prefer
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "FantasqueSansM Nerd Font-15.5:weight=medium" ))
;; (add-to-list 'default-frame-alist '(font . "ComicShannsMono Nerd Font-15.5:weight=medium" ))
;; (set-face-attribute 'default nil :font "FantasqueSansMono Nerd Font-15.5:weight=medium")
;; (add-to-list 'default-frame-alist '(font . "FantasqueSansMono Nerd Font-15.5:weight=medium"))

(setq global-prettify-symbols-mode t)
;; (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font-14" ))
;; (add-to-list 'default-frame-alist '(font . "Comic Mono-12:weight=medium" ))
;; (set-face-attribute 'default t :font "FiraCode Nerd Font-12")
#+end_src
** opacity/blur
#+begin_src emacs-lisp :tangle no 
(set-frame-parameter (selected-frame) 'alpha '(90 90))
(add-to-list 'default-frame-alist '(alpha 90 90))
#+end_src
** bookmarks file
#+begin_src emacs-lisp
(setq bookmark-default-file "~/.config/emacs/bookmarks" )
#+end_src
** recents
#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(add-to-list 'recentf-exclude "~/Downloads.*") 
(add-to-list 'recentf-exclude "~/Movies.*") 
(add-to-list 'recentf-exclude "~/notes.*") 
(add-to-list 'recentf-exclude "/nix/store.*") 
(add-to-list 'recentf-exclude "~/.mozilla.*") 
(add-to-list 'recentf-exclude "/sudo::/.*") 
(setq recentf-max-saved-items 2048
      recentf-exclude '("/tmp/"
                        "/ssh:"
                        "/sudo:"
                        "recentf$"
                        "company-statistics-cache\\.el$"
                        ;; ctags
                        "/TAGS$"
                        ;; global
                        "/GTAGS$"
                        "/GRAGS$"
                        "/GPATH$"
                        ;; binary
                        "\\.mkv$"
                        "\\.mp[34]$"
                        "\\.avi$"
                        "\\.pdf$"
                        "\\.docx?$"
                        "\\.xlsx?$"
                        ;; sub-titles
                        "\\.sub$"
                        "\\.srt$"
                        "\\.ass$"
                        ;; ~/.emacs.d/**/*.el included
                        ;; "/home/[a-z]\+/\\.[a-df-z]" ; configuration file should not be excluded
                        ))
#+end_src
** rainbow mode for colors
#+begin_src emacs-lisp
(use-package rainbow-mode
  :demand t)


(elpaca-wait)

(define-globalized-minor-mode my-global-rainbow-mode rainbow-mode
  (lambda () (rainbow-mode 1)))

(my-global-rainbow-mode 1)
#+end_src
** smooth scrolling
#+begin_src emacs-lisp 
;; (use-package good-scroll :demand t)
;; (good-scroll-mode 1)
(pixel-scroll-precision-mode 1)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) 
;;(pixel-scroll-precision-mode 1)
;; (use-package smooth-scroll :demand t)
;; (smooth-scroll-mode 1)
;; (global-set-key [(down)]  'scroll-up-1)
;; (global-set-key [(up)]    'scroll-down-1)
;; (global-set-key [(left)]  'scroll-right-1)
;; (global-set-key [(right)] 'scroll-left-1)

#+end_src
** Dashboard
#+begin_src emacs-lisp 
;;config :tangle no
(use-package dashboard :elpaca t
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  ;; Content is not centered by default. To center, set
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner `logo) ;; use standard emacs logo as banner
  (setq dashboard-center-content t)
  (setq dashboard-set-navigator t)
  (setq dashboard-page-separator  "\n\f\n")
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (projects . 3)
                          ))
  :config
  (setq dashboard-icon-type 'all-the-icons)
  (setq dashboard-heading-icons '((recents   . "file-text")
                                (bookmarks . "book")
                                (agenda    . "calendar")
                                (projects  . "rocket")
                                (registers . "database")))
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (dashboard-setup-startup-hook))

(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

;;enable recentf mode
(require 'recentf)
(recentf-mode 1)

;; add recentf exclusions
(add-to-list 'recentf-exclude "~/Downloads/")
(add-to-list 'recentf-exclude "~/Desktop/")
#+end_src
** highlight current line
#+begin_src emacs-lisp
(global-hl-line-mode +1)
#+end_src

** properly maximize windws emacs
#+begin_src emacs-lisp
(setq frame-resize-pixelwise t)
#+end_src
** Disable Toolbar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
** Page break lines
#+begin_src emacs-lisp
(use-package page-break-lines :demand t)
#+end_src
** All the icon fonts
#+begin_src emacs-lisp
(use-package all-the-icons :demand t)
(use-package all-the-icons-dired :demand t
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
** Nerd-icons
#+begin_src emacs-lisp
(use-package nerd-icons :demand t
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )
#+end_src
** no blinking cursor
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src
** theme
*** Doom themes
#+begin_src emacs-lisp 
;; (use-package dracula- ensure t)
;; (use-package modus-themes :demand t)
(use-package doom-themes :demand t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-one") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  )

#+end_src
*** Other themes:
**** Catppuccin
#+begin_src emacs-lisp :tangle no
(add-to-list 'custom-theme-load-path "~/dotfiles/emacs.d-gnu/themes")
(load-theme 'catppuccin t)
#+end_src
**** Modus
#+begin_src emacs-lisp :tangle no
(load-theme 'modus-vivendi t)
#+end_src
** Disable Menubar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
** disable scrollbar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src
**  Line Numbers
#+begin_src emacs-lisp
(global-visual-line-mode t)
;; (setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode 1)
#+end_src
** Modeline
*** Doom Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :demand t
  :init (doom-modeline-mode 1))
#+end_src
*** Airline
https://github.com/AnthonyDiGirolamo/airline-themes
#+begin_src emacs-lisp :tangle no
;; (use-package airline-themes :demand t)
;; (load-theme 'airline-base16_dracula t)
#+end_src

** Evil mode
https://github.com/emacs-evil/evil
Evil is an extensible vi layer for Emacs. It emulates the main features of Vim.
*** Default
#+begin_src emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package general :demand t
  :after evil
  :config
  (general-create-definer efs/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
  
  (efs/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

(use-package evil
  :demand t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :demand t
  :after evil
  :config
  (evil-collection-init))


#+end_src
*** Evil args
#+begin_src emacs-lisp
(use-package evil-args :demand t)
(elpaca-wait)

;; bind evil-args text objects
(define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
(define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

;; bind evil-forward/backward-args
(define-key evil-normal-state-map "L" 'evil-forward-arg)
(define-key evil-normal-state-map "H" 'evil-backward-arg)
(define-key evil-motion-state-map "L" 'evil-forward-arg)
(define-key evil-motion-state-map "H" 'evil-backward-arg)

;; bind evil-jump-out-args
(define-key evil-normal-state-map "K" 'evil-jump-out-args)
#+end_src
*** Evil intent plus
#+begin_src emacs-lisp
(use-package evil-indent-plus :demand t)
#+end_src
*** Evil Snipe
#+begin_src emacs-lisp
(use-package evil-snipe :demand t)
(elpaca-wait)
(evil-snipe-mode +1)
(evil-snipe-override-mode +1)
#+end_src
** Undo system
#+begin_src emacs-lisp
(use-package undo-tree
  :demand t
  :after evil
  :diminish
  :config
  (evil-set-undo-system 'undo-tree)
  (global-undo-tree-mode 1))

(setq undo-tree-history-directory-alist '(("." . "~/.emacs-temp/")))
#+end_src

** Padding
#+begin_src emacs-lisp
(push '(internal-border-width . 10) default-frame-alist)
#+end_src

** brackets
#+begin_src emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'parenthesis)
#+end_src

*** Backup settings
*** make emacs-temp if it does not exist
#+begin_src emacs-lisp
(unless (file-exists-p "~/.emacs-temp")
  (mkdir "~/.emacs-temp"))
#+end_src
*** Autosave/Backups directory
 https://emacs.stackexchange.com/questions/33/put-all-backups-into-one-backup-folder
 Put backup files neatly away                                                 
#+begin_src emacs-lisp
(let ((backup-dir "~/.emacs-temp/")
      (auto-saves-dir "~/.emacs-temp/"))
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
        auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
        tramp-backup-directory-alist `((".*" . ,backup-dir))
        tramp-auto-save-directory auto-saves-dir
        ))

(setq backup-by-copying t    ; Don't delink hardlinks                           
      delete-old-versions t  ; Clean up the backups                             
      version-control t      ; Use version numbers on backups,                  
      kept-new-versions 5    ; keep some new versions                           
      kept-old-versions 2)   ; and some old ones, too                           

#+end_src

** magit
#+begin_src emacs-lisp
(use-package magit :demand t)
#+end_src

** Some indentation settings
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)  ; Use spaces instead of tabs
(setq-default tab-width 4)           ; Number of spaces to use for a tab character
(setq-default c-basic-offset 4)      ; Number of spaces to use for each level of indentation
(setq-default tab-stop-list nil)     ; Use tab-width value for 'tab-stop-list'
(electric-indent-mode 1)             ; Automatically indent new lines with same number of spaces as previous line
(setq-default electric-layout-mode t); Automatically adjust indentation based on context
#+end_src

** y for yes
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* Hook to tangle on save
#+begin_src emacs-lisp
(defun tangle-all-org-on-save-h ()
  "Tangle org files on save."
  (if (string= (file-name-extension (buffer-file-name)) "org")
      (org-babel-tangle)))
(add-hook 'after-save-hook #'tangle-all-org-on-save-h)
#+end_src
* Org mode:
#+begin_src emacs-lisp :tangle no
(use-package org :demand t)
;; (ensure-use-package '(org :host nil :type git
;;   :repo "git@github.com:emacs-ensure/org-mode.git"))
;; (ensure-use-package '(org :type built-in))
;; (ensure-use-package '(org :host github :repo "emacs-straight/org-mode"))
#+end_src

#+begin_src emacs-lisp
(setq org-export-html-validation-link nil)
#+end_src
** org mode indent
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src
** org mode disable begin_example blocks
#+begin_src emacs-lisp
(setq org-babel-min-lines-for-block-output 1000)
#+end_src
** Org blocks insert mode
Switch to org edit mode when pressing `i` insert key
#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook
  (lambda ()
    (add-hook 'evil-insert-state-entry-hook
      (lambda ()
        (when (org-in-src-block-p)
          (org-edit-special)
          (evil-insert-state)))
      0 t)))
#+end_src
** snippets:
*** yas-snippet

#+begin_src emacs-lisp
(use-package yasnippet :demand t)
(elpaca-wait)
;; (add-to-list 'load-path ("~/dotfiles/emacs.d-gnu/snippets")
(add-to-list 'load-path
              "~/dotfiles/emacs.d-gnu/snippets")
(setq yas-snippet-dirs '("~/dotfiles/emacs.d-gnu/snippets/"))
(require 'yasnippet)
(yas-global-mode 1)
#+end_src

** org tempo for all the beautiful snippets:

#+begin_src emacs-lisp
;; (use-package 'org-tempo :demand t)
(require 'org-tempo)
#+end_src
** org modern
https://github.com/minad/org-modern
#+begin_src emacs-lisp
(use-package org-modern :demand t)
(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
#+end_src
** org-toc
#+begin_src emacs-lisp
(use-package toc-org :demand t)
(add-hook 'org-mode-hook #'toc-org-enable)
#+end_src

** fixing org blocks
#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0) 
#+end_src
** company org block
#+begin_src emacs-lisp :tangle no
(use-package company-org-block
  :demand t
  :custom
  (company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline
  :hook ((org-mode . (lambda ()
                       (setq-local company-backends '(company-org-block))
                       (company-mode +1)))))
#+end_src
** org-bable load all languages
https://orgmode.org/worg/org-contrib/babel/languages/index.html
#+begin_src emacs-lisp
(require 'ob-comint)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((C . t)
   (emacs-lisp . t)
   (python . t)
   (java . t)
   (shell . t)
   (latex . t)
   (js . t)
   ;; (nix . t)
   ))
(setq org-babel-python-command "python3")
#+end_src
** org bable evaulate
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate t)

#+end_src
** org preserve line breaks
#+begin_src emacs-lisp
(setq org-export-preserve-breaks t)
#+end_src
** org roam
#+begin_src emacs-lisp :tangle no
  (use-package org-roam :demand t)
#+end_src
** org export settings
#+begin_src emacs-lisp
(setq org-html-validation-link nil)
(setq org-html-include-created-date nil)
(setq org-export-preserve-breaks t)

#+end_src
** org-html-themeify
#+begin_src emacs-lisp :tangle no
(use-package org-html-themify
  :ensure
  (org-html-themify
   :type git
   :host github
   :repo "DogLooksGood/org-html-themify"
   :files ("*.el" "*.js" "*.css"))
  :hook (org-mode . org-html-themify-mode)
  :custom
  (org-html-themify-themes
   '((dark . modus-vivendi)
     (light . modus-operandi))))
#+end_src
** org present
#+begin_src emacs-lisp
(use-package org-present :demand t)
#+end_src
** Image settings
#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src

* Tools
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    ;;:demand t
    :demand t 
    :config
    ;;(setq vterm-shell "/bin/zsh")
    ;; (set-popup-rule! "^\\*vterm" :size 0.25 :vslot -4 :select t :quit nil :ttl 0)
    (setq vterm-timer-delay 0)
    )
#+end_src
** Bongo
https://github.com/dbrock/bongo
#+begin_src emacs-lisp 
(use-package bongo :demand t)
#+end_src
** Minimap
#+begin_src emacs-lisp
(use-package minimap
  :demand t)
#+end_src
** Mentor Torrent client
https://github.com/skangas/mentor
#+begin_src emacs-lisp
  (use-package mentor :demand t)
#+end_src
** selectrical mode
#+begin_src emacs-lisp
(use-package selectric-mode :demand t)
#+end_src
** telega
#+begin_src emacs-lisp
(use-package visual-fill-column :demand t)
(use-package telega :ensure nil
  :commands (telega))
;; (setq telega-use-docker t)
#+end_src
** emacs pdf tools
#+begin_src emacs-lisp
(use-package pdf-tools :demand t)
#+end_src
** mu4e
https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Mail-01.org
#+begin_src emacs-lisp :tangle no
(use-package mu4e
  :ensure nil
  ;; :defer 20 ; Wait until 20 seconds after startup
  :config

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")

  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder  "/[Gmail]/Trash")

  (setq mu4e-maildir-shortcuts
        '((:maildir "/Inbox"    :key ?i)
          (:maildir "/[Gmail]/Sent Mail" :key ?s)
          (:maildir "/[Gmail]/Trash"     :key ?t)
          (:maildir "/[Gmail]/Drafts"    :key ?d)
          (:maildir "/[Gmail]/All Mail"  :key ?a))))


#+end_src
** treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :demand t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   t
          treemacs-file-event-delay                5000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :demand t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :demand t)

;; (use-package treemacs-icons-dired
;;   :hook (dired-mode . treemacs-icons-dired-enable-once)
;;   :demand t)

(use-package treemacs-magit
  :after (treemacs magit)
  :demand t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :demand t
  :config (treemacs-set-scope-type 'Perspectives))
#+end_src
** neotree
#+begin_src emacs-lisp
(use-package neotree :demand t)
#+end_src
** dired
#+begin_src emacs-lisp
(setq dired-listing-switches "-alh  --group-directories-first")
;; (setq insert-directory-program "exa")
;; (setq dired-listing-switches "-alh --group-directories-first --color=always --time-style=long-iso --icons")
#+end_src
** elcord
#+begin_src emacs-lisp
(use-package elcord :demand t)
#+end_src
** Shackle
#+begin_src emacs-lisp
(use-package shackle
  :demand t
  ;; :if (not (bound-and-true-p disable-pkg-shackle))
  :config
  (progn
    (setq shackle-lighter "")
    (setq shackle-select-reused-windows nil) ; default nil
    (setq shackle-default-alignment 'below) ; default below
    (setq shackle-default-size 0.4) ; default 0.5

    (setq shackle-rules
          ;; CONDITION(:regexp)            :select     :inhibit-window-quit   :size+:align|:other     :same|:popup
          '((compilation-mode              :select nil                                               )
            ("*undo-tree*"                 :select t                          :size 0.25 :align right)
            ("\\*vterm.*\\*"  :regexp t    :select t                          :size 0.4  :align below)
            ;; ("*eshell*"                    :select t                          :other t               )
            ;;         ("*Shell Command Output*"      :select nil                                               )
            ;;         ("\\*Async Shell.*\\*" :regexp t :ignore t                                                 )
            ;;         (occur-mode                    :select nil                                   :align t    )
            ;;         ("*Help*"                      :select t   :inhibit-window-quit t :other t               )
            ;;         ("*Completions*"                                                  :size 0.3  :align t    )
            ;;         ("*Messages*"                  :select nil :inhibit-window-quit t :other t               )
            ;;         ("\\*[Wo]*Man.*\\*"    :regexp t :select t   :inhibit-window-quit t :other t               )
            ;;         ("\\*poporg.*\\*"      :regexp t :select t                          :other t               )
            ;;         ("\\`\\*helm.*?\\*\\'"   :regexp t                                    :size 0.3  :align t    )
            ;;         ("*calendar*"                  :select t                          :size 0.5  :align below)
            ;;         ("*info*"                      :select t   :inhibit-window-quit t                         :same t)
            ;;         (magit-status-mode             :select t   :inhibit-window-quit t                         :same t)
            ;;         (magit-log-mode                :select t   :inhibit-window-quit t                         :same t)
            ))

    (shackle-mode 1)))


(provide 'setup-shackle)

#+end_src
** pacman
#+begin_src emacs-lisp
(use-package pacmacs :demand t)
#+end_src
** popper.el TODO
https://github.com/karthink/popper

** ERC server settings
#+begin_src emacs-lisp
(require 'erc)
(setq erc-default-server "irc.libera.chat")
(add-hook 'window-configuration-change-hook
          '(lambda ()
             (setq erc-fill-column (- (window-width) 2))))
#+end_src

** elfeed RSS reader
#+begin_src emacs-lisp
(use-package elfeed :demand t)
(setq elfeed-feeds
      '(
        ("https://archlinux.org/feeds/news/" Arch Linux)
        ("https://weekly.nixos.org/feeds/all.rss.xml" NixOS)
        ("https://www.phoronix.com/rss.php" Phoronix)
        ("https://suckless.org/atom.xml" suckless)
        ("https://micronews.debian.org/feeds/feed.rss" Debian)
        )
      )
#+end_src

** Multi cursor
#+begin_src emacs-lisp
(use-package multiple-cursors :demand t)
(elpaca-wait)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

** ement el matrix client
#+begin_src emacs-lisp :tangle no 
(use-package ement :demand t)
#+end_src

* Language and completion support
** completion engines:
*** company mode
#+begin_src emacs-lisp
(use-package company :demand t)
(elpaca-wait)
(add-hook 'after-init-hook 'global-company-mode)
(setq company-minimum-prefix-length 1
      company-idle-delay 0.1) ;; default is 0.2
#+end_src
*** tabnine
#+begin_src emacs-lisp :tangle no 
(use-package company-tabnine :demand t)
(require 'company-tabnine)
(add-to-list 'company-backends #'company-tabnine)
#+end_src
** treesitter
#+begin_src emacs-lisp
(use-package tree-sitter :demand t)
(use-package tree-sitter-langs :demand t)
(elpaca-wait)
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
;; (require 'treesit)
#+end_src

** emoji mode
#+begin_src emacs-lisp
(use-package emojify
  :demand t
  :hook (after-init . global-emojify-mode))
#+end_src
** Parentheses Completion
#+begin_src emacs-lisp
(use-package smartparens :demand t)
(elpaca-wait)
(require 'smartparens-config)
;; (add-hook 'smartparens-mode)
(smartparens-global-mode t)
#+end_src
** Projectile
#+begin_src emacs-lisp
(use-package projectile :demand t)
(require 'smartparens-config)
#+end_src

** vertico and orderless
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico :demand t
  :init
  (vertico-mode)
  )

(use-package orderless :demand t
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist :elpaca nil
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs :elpaca nil
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

*** consult
https://github.com/minad/consult
#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  :demand t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI. You may want to also
  ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Optionally replace `completing-read-multiple' with an enhanced version.
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key "M-.")

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")
)
#+end_src

*** Marginalia.el
https://github.com/minad/marginalia
#+begin_src emacs-lisp
;; Enable richer annotations using the Marginalia package
(use-package marginalia
  :demand t
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  
  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

*** emacs-direnv
#+begin_src emacs-lisp
(use-package direnv :demand t
 :config
 (direnv-mode))
(setq direnv-always-show-summary nil)
#+end_src

** languages and lsp-mode
https://emacs-lsp.github.io/lsp-mode/
and also https://emacs-lsp.github.io/lsp-mode/page/languages/
*** General Setup with lsp
#+begin_src emacs-lisp 
(use-package flycheck :demand t)
(use-package lsp-mode :demand t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :config
  (add-hook 'typescript-mode-hook 'lsp)
  (add-hook 'js-mode-hook 'lsp)
  :hook (
         (rust-mode  . lsp)
         (html-mode  . lsp)
         (web-mode  . lsp)
         (sgml-mode  . lsp)
         ;; (js2-mode  . lsp)
         (typescript-mode  . lsp)
         (c-mode  . lsp)
         (c++-mode  . lsp)
         (css-mode . lsp)
         (zig-mode . lsp)
         (sh-mode . lsp)
         (lua-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode :demand t)

;; (setq lsp-ui-doc-enable nil)
;;(use-package lsp-treemacs :demand t)
                                        ; (add-hook 'prog-mode-hook 'lsp)

;; (setq lsp-use-plists t)
(setq lsp-idle-delay 0.001)
(setq lsp-enable-on-type-formatting nil)
#+end_src
*** lsp file watchers
#+begin_src emacs-lisp
;; (with-eval-after-load 'lsp-mode
;;   (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\catuserbot\\'")
;;   ;; or
;;   ;; (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\.my-files\\'")
;;   )
;; (setq lsp-enable-file-watchers nil)

#+end_src
*** lsp on demand
#+begin_src emacs-lisp
(advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))
#+end_src
*** Eglot setup
not tangling atm
#+begin_src emacs-lisp :tangle no
(use-package eglot :demand t)
(add-hook 'foo-mode-hook 'eglot-ensure)
#+end_src
*** sql
#+begin_src emacs-lisp
(require 'sql)
(defalias 'sql-get-login 'ignore)
#+end_src
*** yaml-mode
#+begin_src emacs-lisp
(use-package yaml-mode
  :demand t)
#+end_src
*** python
**** pyright
#+begin_src emacs-lisp 
(use-package lsp-pyright
  :demand t
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred

#+end_src
**** jedi
#+begin_src emacs-lisp :tangle no
(use-package lsp-jedi
  :demand t
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls 'pyright)))
#+end_src
**** python lsp
#+begin_src emacs-lisp :tangle no
(use-package lsp-python-ms
  :demand t
  :hook (python-mode . (lambda ()
                         (require 'lsp-python-ms)
                         (lsp)))
  :init
  (setq lsp-python-ms-executable (executable-find "python-language-server")))

#+end_src
**** pipenv.el
https://github.com/pwalsh/pipenv.el
#+begin_src emacs-lisp
(use-package pipenv
  :hook (python-mode . pipenv-mode)
  :init
  (setq
   pipenv-projectile-after-switch-function
   #'pipenv-projectile-after-switch-extended)
  (setq pipenv-keymap-prefix (kbd "C-c C-q"))
  )

#+end_src
*** php
#+begin_src emacs-lisp
(use-package php-mode
  :demand t)
#+end_src
*** html
#+begin_src emacs-lisp
(use-package web-beautify :demand t)
(use-package htmlize :demand t)
;; (use-package js2-mode :demand t)
;; (add-hook 'js-mode-hook 'js2-minor-mode)
;; (add-hook 'js2-mode-hook 'ac-js2-mode)
;; (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))
;; (setq js2-strict-missing-semi-warning nil)
#+end_src
**** web mode
#+begin_src emacs-lisp
(use-package web-mode :demand t)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
(setq-default indent-tabs-mode nil)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.hbs?\\'" . html-mode))
(defun my-web-mode-hook ()
  "Hooks for Web mode."
  ;; (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 4)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-auto-closing t)
  ;; (setq web-mode-enable-current-element-highlight t)
  ;; (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-script-padding 2)
  )
(add-hook 'web-mode-hook  'my-web-mode-hook)
#+end_src
***** Tide
#+begin_src emacs-lisp
(use-package tide
  :demand t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))
#+end_src
**** Emmet mode
#+begin_src emacs-lisp
(use-package emmet-mode :demand t)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(add-hook 'web-mode 'emmet-mode)
#+end_src
*** Haskell
**** haskell mode
#+begin_src emacs-lisp
(use-package haskell-mode :demand t)
#+end_src
*** Fish
#+begin_src emacs-lisp
(use-package fish-mode :demand t)
#+end_src
*** nix
#+begin_src emacs-lisp
(use-package nix-mode :demand t
  :mode "\\.nix\\'")
;; (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
;; (lsp-register-client
;;  (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
;;                   :major-modes '(nix-mode)
;;                   :server-id 'nix))

(use-package nixpkgs-fmt :demand t)
;; (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
;; (lsp-register-client
;;  (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
;;                   :major-modes '(nix-mode)
;;                   :server-id 'nix))
#+end_src

*** java
#+begin_src emacs-lisp 
(use-package lsp-java :demand t)
(add-hook 'java-mode-hook (lambda ()
                            (setq c-basic-offset 4
                                  ;; tab-width 4
                                  indent-tabs-mode nil)))
(setq lsp-java-format-on-type-enabled nil)
#+end_src
*** lua
#+begin_src emacs-lisp
(use-package lua-mode
 :demand t
 :mode "\\.lua$"
 :interpreter "lua"
 :hook (lua-mode . set-company-backends-for-lua)
 :config
 (setq lua-indent-level 4)
 (setq lua-indent-string-contents t)
 (setq lua-prefix-key nil)
 )
#+end_src

*** PKGBUILD
#+begin_src emacs-lisp
(use-package pkgbuild-mode :demand t)
(elpaca-wait)
(require 'pkgbuild-mode)
#+end_src

*** rust
#+begin_src emacs-lisp
(use-package rust-mode :demand t)
#+end_src
*** lsp
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            ;; Use spaces, not tabs.
            (setq indent-tabs-mode nil)
            ;; Keep M-TAB for `completion-at-point'
            (define-key flyspell-mode-map "\M-\t" nil)
            ;; Pretty-print eval'd expressions.
            (define-key emacs-lisp-mode-map
                        "\C-x\C-e" 'pp-eval-last-sexp)
            ;; Recompile if .elc exists.
            (add-hook (make-local-variable 'after-save-hook)
                      (lambda ()
                        (byte-force-recompile default-directory)))
            (define-key emacs-lisp-mode-map
                        "\r" 'reindent-then-newline-and-indent)))
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode) ;; Requires Ispell
#+end_src

*** C/C++ mode
#+begin_src emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 4
      )
#+end_src
**** some C settings
#+begin_src emacs-lisp
(defun c-lineup-arglist-tabs-only (ignored)
  "Line up argument lists by tabs, not spaces"
  (let* ((anchor (c-langelem-pos c-syntactic-element))
         (column (c-langelem-2nd-pos c-syntactic-element))
         (offset (- (1+ column) anchor))
         (steps (floor offset c-basic-offset)))
    (* (max steps 1)
       c-basic-offset)))

(add-hook 'c-mode-common-hook
          (lambda ()
            ;; Add kernel style
            (c-add-style
             "linux-tabs-only"
             '("linux" (c-offsets-alist
                        (arglist-cont-nonempty
                         c-lineup-gcc-asm-reg
                         c-lineup-arglist-tabs-only))))))

(add-hook 'c-mode-hook
          (lambda ()
            (let ((filename (buffer-file-name)))
              ;; Enable kernel mode for the appropriate files
              (when (and filename
                         (string-match (expand-file-name "~/src/linux-trees")
                                       filename))
                (setq indent-tabs-mode t)
                (setq show-trailing-whitespace t)
                (c-set-style "linux-tabs-only")))))

#+end_src

*** Docker Mode
#+begin_src emacs-lisp
(use-package dockerfile-mode :demand t)
(use-package docker-compose-mode :demand t)
(use-package docker
  :demand t
  :bind ("C-c d" . docker))
#+end_src
*** rust 
#+begin_src emacs-lisp
(use-package rustic
  :demand t
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save nil)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t)))
#+end_src
*** zig
#+begin_src emacs-lisp
  (use-package zig-mode :demand t)
  (setq lsp-zig-zls-executable "~/zls/zls")
#+end_src
** which key
#+begin_src emacs-lisp
(use-package which-key
  :demand t
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(elpaca-wait)
(which-key-mode)
#+end_src


* prevent "saving to x clipboard manager
#+begin_src emacs-lisp
(setq x-select-enable-clipboard-manager nil)
#+end_src

* prevent *warnings* spam
#+begin_src emacs-lisp
(setq-default warning-minimum-level :error)
#+end_src
* elaca stuff for dashboard
#+begin_src emacs-lisp
(setq elpaca-after-init-time (current-time)) ;; prevents `elpaca-after-init-hook` from running later.
(elpaca-wait)
#+end_src
