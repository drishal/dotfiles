#+TITLE: init.el
#+PROPERTY: header-args :tangle init.el


* Table of contents  :toc:
- [[#emacs-startup][emacs startup]]
  - [[#shift-theme-variables-to-customel-make-sure-to-create-it-if-it-does-not-exist][shift theme variables to ~custom.el~, make sure to create it if it does not exist]]
  - [[#emacs-startup-performance][emacs startup performance]]
- [[#initialize-package-sources][Initialize package sources]]
  - [[#packageel][Package.el]]
  - [[#straightel-make-sure-to-later-remove-packageel][straight.el: make sure to later remove package.el]]
  - [[#quelpa][quelpa]]
- [[#customizing-the-appearence][Customizing the appearence]]
  - [[#dashboard][Dashboard]]
  - [[#properly-maximize-windws-emacs][properly maximize windws emacs]]
  - [[#theme][theme]]
  - [[#disable-menubar][Disable Menubar]]
  - [[#disable-toolbar][Disable Toolbar]]
  - [[#disable-scrollbar][disable scrollbar]]
  - [[#all-the-icon-fonts][All the icon fonts]]
  - [[#line-numbers][Line Numbers]]
  - [[#doom-modeline][Doom modeline]]
  - [[#loading-the-theme][Loading the theme]]
  - [[#fonts][Fonts]]
  - [[#evil-mode][Evil mode]]
  - [[#undo-system][Undo system]]
  - [[#padding][Padding]]
- [[#hook-to-tangle-on-save][Hook to tangle on save]]
- [[#org-mode][Org mode:]]
  - [[#org-mode-indent][org mode indent]]
  - [[#snippets][snippets:]]
  - [[#org-tempo-for-all-the-beautiful-snippets][org tempo for all the beautiful snippets:]]
  - [[#superstar-for-some-pretty-symbols][Superstar for some pretty symbols]]
  - [[#org-toc][org-toc]]
  - [[#company-org-block][company org block]]
  - [[#org-bable-load-all-languages][org-bable load all languages]]
- [[#tools][Tools]]
  - [[#vterm][vterm]]
  - [[#treemacs][treemacs]]
  - [[#elcord][elcord]]
  - [[#shackle][Shackle]]
  - [[#using-exwm][Using EXWM]]
  - [[#erc-server-settings][ERC server settings]]
  - [[#elfeed-rss-reader][elfeed RSS reader]]
- [[#language-and-completion-support][Language and completion support]]
  - [[#completion-engines][completion engines:]]
  - [[#using-tabnine-for-completion][using tabnine for completion]]
  - [[#emoji-mode][emoji mode]]
  - [[#parentheses-completion][Parentheses Completion]]
  - [[#projectile][Projectile]]
  - [[#languages-and-lsp-mode][languages and lsp-mode]]
  - [[#which-key][which key]]
- [[#prevent-saving-to-x-clipboard-manager][prevent "saving to x clipboard manager]]
- [[#prevent-warnings-buffer][prevent *warnings* buffer]]
- [[#disable-backups][Disable backups]]
- [[#emacs-fixing-some-window-stuff][emacs fixing some window stuff]]
- [[#restart-emacs-package][restart emacs package]]

* emacs startup
** shift theme variables to ~custom.el~, make sure to create it if it does not exist
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load-file (expand-file-name "custom.el" user-emacs-directory))
  (setq gc-cons-threshold 10000000000)
#+end_src
** emacs startup performance
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  ;; (setq gc-cons-threshold (* 50 1000 1000))
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

* Initialize package sources
** Package.el
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
** straight.el: make sure to later remove package.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package) ; make sure use package is installed
  (use-package el-patch
    :straight t)                   ;and now we will have use package here
#+end_src
note: Users of Emacs versions >= 27 will want to add:
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src
** quelpa
https://github.com/quelpa/quelpa#installation
#+begin_src emacs-lisp 
  (use-package quelpa :ensure t)
#+end_src
* Customizing the appearence
** Dashboard
#+begin_src emacs-lisp
    (use-package dashboard :ensure t
      :init      ;; tweak dashboard config before loading it
      (setq dashboard-set-heading-icons t)
      ;; Content is not centered by default. To center, set
      (setq dashboard-set-file-icons t)
      (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
      (setq dashboard-startup-banner `logo) ;; use standard emacs logo as banner
      ;;(setq dashboard-startup-banner 'logo)
      ;;(setq dashboard-startup-banner "~/.emacs.d/emacs-dash3.png")  ;; use custom image as banner
      (setq dashboard-center-content t)
      (setq dashboard-set-navigator t)
      (setq dashboard-items '((recents . 5)
                              (agenda . 5 )
                              (bookmarks . 5)
                              (projects . 3)
                              ;(registers . 3)
                              ))
      :config
      (dashboard-setup-startup-hook)
      (dashboard-modify-heading-icons '((recents . "file-text")
                                        (bookmarks . "book"))))

    ;;`(add-hook 'after-init-hook (lambda () (switch-to-buffer "*dashboard*")))
                                            ; for emacsclient
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** properly maximize windws emacs 
#+begin_src emacs-lisp 
  (setq frame-resize-pixelwise t)
#+end_src
** theme
#+begin_src emacs-lisp
  ;; (use-package dracula- ensure t)
  (use-package doom-themes :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-dracula  t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src
** Disable Menubar
#+begin_src emacs-lisp
  (menu-bar-mode -1) 
#+end_src
** Disable Toolbar
#+begin_src emacs-lisp
  (tool-bar-mode -1) 
#+end_src
** disable scrollbar 
#+begin_src emacs-lisp 
  (scroll-bar-mode -1)
#+end_src
** All the icon fonts
#+begin_src emacs-lisp
  (use-package all-the-icons :ensure t)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src
** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline :ensure t)
  (doom-modeline-mode 1)
#+end_src

** Loading the theme
#+begin_src emacs-lisp
  ;;(load-theme 'doom-dracula t)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "FiraCode Nerd Font 11"
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "FiraCode Nerd Font  11"
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "FiraCode Nerd Font 11"
                      :weight 'medium)
  ;; Makes commented text italics (working in emacsclient but not emacs)
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  ;; Makes keywords italics (working in emacsclient but not emacs)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font 11"))
  ;; changes certain keywords to symbols, such as lamda!
  (setq global-prettify-symbols-mode t)

#+end_src
** Evil mode
*** Default 
#+begin_src emacs-lisp
  (use-package evil :ensure t 
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))

  (use-package command-log-mode
    :commands command-log-mode)
  ;;helps for repeat searching; also remember to use :noh to do the highlighting  
  (with-eval-after-load 'evil
    (evil-select-search-module 'evil-search-module 'evil-search))

#+end_src
*** Evil args 
#+begin_src emacs-lisp
  (use-package evil-args :ensure t)

  ;; bind evil-args text objects
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

  ;; bind evil-forward/backward-args
  (define-key evil-normal-state-map "L" 'evil-forward-arg)
  (define-key evil-normal-state-map "H" 'evil-backward-arg)
  (define-key evil-motion-state-map "L" 'evil-forward-arg)
  (define-key evil-motion-state-map "H" 'evil-backward-arg)

  ;; bind evil-jump-out-args
  (define-key evil-normal-state-map "K" 'evil-jump-out-args)
#+end_src
*** Evil intent plus
#+begin_src emacs-lisp 
  (use-package evil-indent-plus :ensure t)
#+end_src
*** Evil Snipe
#+begin_src emacs-lisp
  (use-package evil-snipe :ensure t)
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1)
#+end_src
** Undo system
#+begin_src emacs-lisp 
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
#+end_src

** Padding 
#+begin_src emacs-lisp
  (push '(internal-border-width . 10) default-frame-alist)
#+end_src
* Hook to tangle on save
#+begin_src emacs-lisp
  (defun f2k--tangle-all-org-on-save-h ()
    "Tangle org files on save."
    (if (string= (file-name-extension (buffer-file-name)) "org")
        (org-babel-tangle)))

  (add-hook 'after-save-hook #'f2k--tangle-all-org-on-save-h)

#+end_src
* Org mode: 
** org mode indent
#+begin_src emacs-lisp 
  (setq org-startup-indented t)
#+end_src
** snippets:
*** ya-snippet
#+begin_src emacs-lisp
  (use-package yasnippet  :ensure t) 
  (require 'yasnippet)
  (yas-global-mode 1)

#+end_src
*** doom snippets
see  https://github.com/hlissner/doom-snippets
#+begin_src emacs-lisp
  ;; (use-package doom-snippets
  ;;   :ensure t
  ;;   :load-path "/home/drishal/.emacs.d/custom-repos/doom-snippets"
  ;;   :after yasnippet)
#+end_src
** org tempo for all the beautiful snippets: 

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
** Superstar for some pretty symbols 
#+begin_src emacs-lisp
  (use-package org-superstar :ensure t)
  (require 'org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src
** org-toc
#+begin_src emacs-lisp
  (use-package toc-org :ensure t)
  (add-hook 'org-mode-hook #'toc-org-enable)

#+end_src
** company org block
#+begin_src emacs-lisp 
  (use-package company-org-block :ensure t)
  (require 'company-org-block)

  (setq company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline

  (add-hook 'org-mode-hook
            (lambda ()
              (add-to-list (make-local-variable 'company-backends)
                           'company-org-block)))
#+end_src
** org-bable load all languages
#+begin_src emacs-lisp 
  (require 'ob-comint)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (emacs-lisp . t)
       (python . t)
       ))

 (setq org-babel-python-command "python3")
#+end_src

* Tools
** vterm
#+begin_src emacs-lisp `
  (use-package vterm :ensure t 
    ;; :config 
    ;; (set-popup-rule! "^\\*vterm" :size 0.25 :vslot -4 :select t :quit nil :ttl 0)
    )
#+end_src
** treemacs 
#+begin_src emacs-lisp 
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-expand-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-read-string-input             'from-child-frame
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-litter-directories            '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))
#+end_src
** elcord
#+begin_src emacs-lisp
  (use-package elcord :ensure t)
#+end_src
** Shackle
#+begin_src emacs-lisp
  (use-package shackle
    :ensure t
    ;; :if (not (bound-and-true-p disable-pkg-shackle))
    :config
    (progn
      (setq shackle-lighter "")
      (setq shackle-select-reused-windows nil) ; default nil
      (setq shackle-default-alignment 'below) ; default below
      (setq shackle-default-size 0.4) ; default 0.5

      (setq shackle-rules
            ;; CONDITION(:regexp)            :select     :inhibit-window-quit   :size+:align|:other     :same|:popup
            '((compilation-mode              :select nil                                               )
              ("*undo-tree*"                 :select t                          :size 0.25 :align right)
              ("\\*vterm.*\\*"  :regexp t    :select t                          :size 0.4  :align below)
              ;; ("*eshell*"                    :select t                          :other t               )
              ;;         ("*Shell Command Output*"      :select nil                                               )
              ;;         ("\\*Async Shell.*\\*" :regexp t :ignore t                                                 )
              ;;         (occur-mode                    :select nil                                   :align t    )
              ;;         ("*Help*"                      :select t   :inhibit-window-quit t :other t               )
              ;;         ("*Completions*"                                                  :size 0.3  :align t    )
              ;;         ("*Messages*"                  :select nil :inhibit-window-quit t :other t               )
              ;;         ("\\*[Wo]*Man.*\\*"    :regexp t :select t   :inhibit-window-quit t :other t               )
              ;;         ("\\*poporg.*\\*"      :regexp t :select t                          :other t               )
              ;;         ("\\`\\*helm.*?\\*\\'"   :regexp t                                    :size 0.3  :align t    )
              ;;         ("*calendar*"                  :select t                          :size 0.5  :align below)
              ;;         ("*info*"                      :select t   :inhibit-window-quit t                         :same t)
              ;;         (magit-status-mode             :select t   :inhibit-window-quit t                         :same t)
              ;;         (magit-log-mode                :select t   :inhibit-window-quit t                         :same t)
              ))

      (shackle-mode 1)))


  (provide 'setup-shackle)

#+end_src
** Using EXWM
#+begin_src emacs-lisp 
  (use-package exwm :ensure t)
                                          ;(require 'exwm)
                                          ;(require 'exwm-config)
                                          ;(exwm-config-default)

#+end_src
** ERC server settings 
#+begin_src emacs-lisp
  (require 'erc)
  (setq erc-default-server "irc.libera.chat")
  (add-hook 'window-configuration-change-hook 
            '(lambda ()
               (setq erc-fill-column (- (window-width) 2))))
#+end_src

** elfeed RSS reader 
#+begin_src emacs-lisp
  (use-package elfeed :ensure t)
  (setq elfeed-feeds
        '(
          ("https://archlinux.org/feeds/news/" Arch Linux)
          ("https://weekly.nixos.org/feeds/all.rss.xml" NixOS)
          ("https://www.phoronix.com/rss.php" Phoronix)
          )
        )
#+end_src

* Language and completion support 
** completion engines:
*** company mode
#+begin_src emacs-lisp
  (use-package company :ensure t)

  ;; (use-package company-lsp
  ;;     :ensure t
  ;;     :config
  ;;     (push 'company-lsp company-backends))

  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0) ;; default is 0.2

#+end_src
** using tabnine for completion
#+begin_src emacs-lisp 
  ;;    (use-package company-tabnine :ensure t)
  ;;  (require 'company-tabnine)
  ;; (add-to-list 'company-backends #'company-tabnine)
#+end_src

** emoji mode
#+begin_src emacs-lisp 
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode))
#+end_src
** Parentheses Completion 
#+begin_src emacs-lisp 
  (use-package smartparens :ensure t)
  (require 'smartparens)
  ;; (add-hook 'smartparens-mode)
  (smartparens-global-mode t)
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile :ensure t)
  (require 'smartparens-config)
#+end_src

*** vertico and orderless
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Use the `orderless' completion style.
  ;; Enable `partial-completion' for files to allow path expansion.
  ;; You may prefer to use `initials' instead of `partial-completion'.
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Grow and shrink minibuffer
    ;;(setq resize-mini-windows t)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

#+end_src
** languages and lsp-mode
https://emacs-lsp.github.io/lsp-mode/
and also https://emacs-lsp.github.io/lsp-mode/page/languages/
*** General Setup 
#+begin_src emacs-lisp
  (use-package flycheck :ensure t)
  (use-package lsp-mode :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (XXX-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode :ensure t)

  ;; (setq lsp-ui-doc-enable nil)
  (use-package lsp-treemacs :ensure t)
                                          ; (add-hook 'prog-mode-hook 'lsp)

  ;; (setq lsp-use-plists t)
  ;;(setq lsp-idle-delay 0.500)
#+end_src
*** python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred

#+end_src
*** Haskell
**** haskell mode
#+begin_src emacs-lisp
  (use-package haskell-mode :ensure t)
#+end_src
*** Fish
#+begin_src emacs-lisp
  (use-package fish-mode :ensure t)
#+end_src
*** nix
#+begin_src emacs-lisp
  (use-package nix-mode :ensure t
    :mode "\\.nix\\'")
#+end_src
*** java 
#+begin_src emacs-lisp 
  (use-package lsp-java :ensure t)
  (add-hook 'java-mode-hook #'lsp)
#+end_src
*** web stuff
**** html lsp server
#+begin_src emacs-lisp 
  (add-hook 'html-mode-hook #'lsp)
  (setq lsp-enable-snippet t)
#+end_src

**** web mode
#+begin_src emacs-lisp 
  (use-package web-mode :ensure t)
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+end_src

*** C/C++ mode
#+begin_src emacs-lisp 
  (add-hook 'c-mode-hook #'lsp) 
  (add-hook 'c++-mode-hook #'lsp) 
#+end_src
*** rust mode
#+begin_src emacs-lisp 
  (use-package rust-mode :ensure t)
  (add-hook 'rust-mode-hook #'lsp) 
#+end_src
** which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " ))
  (which-key-mode)
#+end_src

* prevent "saving to x clipboard manager
#+begin_src emacs-lisp
  (setq x-select-enable-clipboard-manager nil)
#+end_src

* prevent *warnings* buffer  
#+begin_src emacs-lisp
  (setq-default warning-minimum-level :error)
#+end_src
  
* Disable backups
#+begin_src emacs-lisp 
  (setq make-backup-files nil)
#+end_src

* emacs fixing some window stuff
#+begin_src emacs-lisp 
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
 ;; (add-to-list 'default-frame-alist '(fullscreen . fullheight))
#+end_src

* restart emacs package
#+begin_src emacs-lisp
  (use-package restart-emacs :ensure t)
#+end_src
