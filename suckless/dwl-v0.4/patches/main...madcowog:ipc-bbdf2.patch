From 8b479b440d95b8deb97ff852c1c44ab4b21270fa Mon Sep 17 00:00:00 2001
From: MadcowOG <N/A>
Date: Wed, 26 Apr 2023 15:26:21 -0700
Subject: [PATCH] Implemented dwl-ipc

---
 Makefile                          |  13 +-
 config.def.h                      |   1 +
 dwl.c                             | 212 +++++++++++++++++++++++++++++-
 protocols/dwl-ipc-unstable-v1.xml | 183 ++++++++++++++++++++++++++
 4 files changed, 405 insertions(+), 4 deletions(-)
 create mode 100644 protocols/dwl-ipc-unstable-v1.xml

diff --git a/Makefile b/Makefile
index ccca07948..6e2d4fa1a 100644
--- a/Makefile
+++ b/Makefile
@@ -14,10 +14,11 @@ DWLCFLAGS = `$(PKG_CONFIG) --cflags $(PKGS)` $(DWLCPPFLAGS) $(DWLDEVCFLAGS) $(CF
 LDLIBS    = `$(PKG_CONFIG) --libs $(PKGS)` $(LIBS)
 
 all: dwl
-dwl: dwl.o util.o
-	$(CC) dwl.o util.o $(LDLIBS) $(LDFLAGS) $(DWLCFLAGS) -o $@
-dwl.o: dwl.c config.mk config.h client.h xdg-shell-protocol.h wlr-layer-shell-unstable-v1-protocol.h
+dwl: dwl.o util.o dwl-ipc-unstable-v1-protocol.o
+	$(CC) dwl.o util.o dwl-ipc-unstable-v1-protocol.o -g $(LDLIBS) $(LDFLAGS) $(DWLCFLAGS) -o $@
+dwl.o: dwl.c config.mk config.h client.h xdg-shell-protocol.h wlr-layer-shell-unstable-v1-protocol.h dwl-ipc-unstable-v1-protocol.o
 util.o: util.c util.h
+dwl-ipc-unstable-v1-protocol.o: dwl-ipc-unstable-v1-protocol.h
 
 # wayland-scanner is a tool which generates C headers and rigging for Wayland
 # protocols, which are specified in XML. wlroots requires you to rig these up
@@ -31,6 +32,12 @@ xdg-shell-protocol.h:
 wlr-layer-shell-unstable-v1-protocol.h:
 	$(WAYLAND_SCANNER) server-header \
 		protocols/wlr-layer-shell-unstable-v1.xml $@
+dwl-ipc-unstable-v1-protocol.h:
+	$(WAYLAND_SCANNER) server-header \
+		protocols/dwl-ipc-unstable-v1.xml $@
+dwl-ipc-unstable-v1-protocol.c:
+	$(WAYLAND_SCANNER) private-code \
+		protocols/dwl-ipc-unstable-v1.xml $@
 
 config.h:
 	cp config.def.h $@
diff --git a/config.def.h b/config.def.h
index c6a495048..2b4b29f82 100644
--- a/config.def.h
+++ b/config.def.h
@@ -111,6 +111,7 @@ static const Key keys[] = {
 	/* modifier                  key                 function        argument */
 	{ MODKEY,                    XKB_KEY_p,          spawn,          {.v = menucmd} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Return,     spawn,          {.v = termcmd} },
+    { MODKEY,                    XKB_KEY_b,          toggle_visibility, {0}},
 	{ MODKEY,                    XKB_KEY_j,          focusstack,     {.i = +1} },
 	{ MODKEY,                    XKB_KEY_k,          focusstack,     {.i = -1} },
 	{ MODKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },
diff --git a/dwl.c b/dwl.c
index b7436bb4f..ebbcb5010 100644
--- a/dwl.c
+++ b/dwl.c
@@ -58,6 +58,7 @@
 #include <xcb/xcb_icccm.h>
 #endif
 
+#include "dwl-ipc-unstable-v1-protocol.h"
 #include "util.h"
 
 /* macros */
@@ -128,6 +129,12 @@ typedef struct {
 	uint32_t resize; /* configure serial of a pending resize */
 } Client;
 
+typedef struct {
+    struct wl_list link;
+    struct wl_resource *resource;
+    Monitor *monitor;
+} DwlIpcOutput;
+
 typedef struct {
 	uint32_t mod;
 	xkb_keysym_t keysym;
@@ -174,6 +181,7 @@ typedef struct {
 
 struct Monitor {
 	struct wl_list link;
+    struct wl_list dwl_ipc_outputs;
 	struct wlr_output *wlr_output;
 	struct wlr_scene_output *scene_output;
 	struct wlr_scene_rect *fullscreen_bg; /* See createmon() for info */
@@ -255,6 +263,17 @@ static void destroynotify(struct wl_listener *listener, void *data);
 static void destroysessionlock(struct wl_listener *listener, void *data);
 static void destroysessionmgr(struct wl_listener *listener, void *data);
 static Monitor *dirtomon(enum wlr_direction dir);
+static void dwl_ipc_manager_bind(struct wl_client *client, void *data, uint32_t version, uint32_t id);
+static void dwl_ipc_manager_destroy(struct wl_resource *resource);
+static void dwl_ipc_manager_get_output(struct wl_client *client, struct wl_resource *resource, uint32_t id, struct wl_resource *output);
+static void dwl_ipc_manager_release(struct wl_client *client, struct wl_resource *resource);
+static void dwl_ipc_output_destroy(struct wl_resource *resource);
+static void dwl_ipc_output_printstatus(Monitor *monitor);
+static void dwl_ipc_output_printstatus_to(DwlIpcOutput *ipc_output);
+static void dwl_ipc_output_set_client_tags(struct wl_client *client, struct wl_resource *resource, uint32_t and_tags, uint32_t xor_tags);
+static void dwl_ipc_output_set_layout(struct wl_client *client, struct wl_resource *resource, uint32_t index);
+static void dwl_ipc_output_set_tag(struct wl_client *client, struct wl_resource *resource, uint32_t tagmask, uint32_t toggle_tagset);
+static void dwl_ipc_output_release(struct wl_client *client, struct wl_resource *resource);
 static void focusclient(Client *c, int lift);
 static void focusmon(const Arg *arg);
 static void focusstack(const Arg *arg);
@@ -306,6 +325,7 @@ static void togglefloating(const Arg *arg);
 static void togglefullscreen(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
+static void toggle_visibility(const Arg *arg);
 static void unlocksession(struct wl_listener *listener, void *data);
 static void unmaplayersurfacenotify(struct wl_listener *listener, void *data);
 static void unmapnotify(struct wl_listener *listener, void *data);
@@ -371,6 +391,8 @@ static struct wl_listener cursor_frame = {.notify = cursorframe};
 static struct wl_listener cursor_motion = {.notify = motionrelative};
 static struct wl_listener cursor_motion_absolute = {.notify = motionabsolute};
 static struct wl_listener drag_icon_destroy = {.notify = destroydragicon};
+static struct zdwl_ipc_manager_v1_interface dwl_ipc_manager_implementation = { .release = dwl_ipc_manager_release, .get_output = dwl_ipc_manager_get_output };
+static struct zdwl_ipc_output_v1_interface dwl_ipc_output_implementation = { .release = dwl_ipc_output_release, .set_tags = dwl_ipc_output_set_tag, .set_layout = dwl_ipc_output_set_layout, .set_client_tags = dwl_ipc_output_set_client_tags };
 static struct wl_listener idle_inhibitor_create = {.notify = createidleinhibitor};
 static struct wl_listener idle_inhibitor_destroy = {.notify = destroyidleinhibitor};
 static struct wl_listener layout_change = {.notify = updatemons};
@@ -685,12 +707,15 @@ void
 cleanupmon(struct wl_listener *listener, void *data)
 {
 	Monitor *m = wl_container_of(listener, m, destroy);
+    DwlIpcOutput *ipc_output, *ipc_tmp;
 	LayerSurface *l, *tmp;
 	int i;
 
 	for (i = 0; i <= ZWLR_LAYER_SHELL_V1_LAYER_OVERLAY; i++)
 		wl_list_for_each_safe(l, tmp, &m->layers[i], link)
 			wlr_layer_surface_v1_destroy(l->layer_surface);
+    wl_list_for_each_safe(ipc_output, ipc_tmp, &m->dwl_ipc_outputs, link)
+        wl_resource_destroy(ipc_output->resource);
 
 	wl_list_remove(&m->destroy.link);
 	wl_list_remove(&m->frame.link);
@@ -905,6 +930,7 @@ createmon(struct wl_listener *listener, void *data)
 	Monitor *m = wlr_output->data = ecalloc(1, sizeof(*m));
 	m->wlr_output = wlr_output;
 
+    wl_list_init(&m->dwl_ipc_outputs);
 	wlr_output_init_render(wlr_output, alloc, drw);
 
 	/* Initialize monitor state using configured rules */
@@ -1045,7 +1071,7 @@ createpointer(struct wlr_pointer *pointer)
 
 		if (libinput_device_config_scroll_get_methods(libinput_device) != LIBINPUT_CONFIG_SCROLL_NO_SCROLL)
 			libinput_device_config_scroll_set_method (libinput_device, scroll_method);
-		
+
 		if (libinput_device_config_click_get_methods(libinput_device) != LIBINPUT_CONFIG_CLICK_METHOD_NONE)
 			libinput_device_config_click_set_method (libinput_device, click_method);
 
@@ -1197,6 +1223,182 @@ dirtomon(enum wlr_direction dir)
 	return selmon;
 }
 
+void dwl_ipc_manager_bind(struct wl_client *client, void *data, uint32_t version, uint32_t id) {
+    int i;
+    struct wl_resource *resource = wl_resource_create(client, &zdwl_ipc_manager_v1_interface, version, id);
+    if (!resource) {
+        wl_client_post_no_memory(client);
+        return;
+    }
+    wl_resource_set_implementation(resource, &dwl_ipc_manager_implementation, NULL, dwl_ipc_manager_destroy);
+
+    for (i = 0; i < LENGTH(tags); i++)
+        zdwl_ipc_manager_v1_send_tag(resource, tags[i]);
+
+    for (i = 0; i < LENGTH(layouts); i++)
+        zdwl_ipc_manager_v1_send_layout(resource, layouts[i].symbol);
+}
+
+void dwl_ipc_manager_destroy(struct wl_resource *resource) {
+    /* No state to destroy */
+}
+
+void dwl_ipc_manager_get_output(struct wl_client *client, struct wl_resource *resource, uint32_t id, struct wl_resource *output) {
+    DwlIpcOutput *ipc_output;
+    Monitor *monitor = wlr_output_from_resource(output)->data;
+    struct wl_resource *output_resource = wl_resource_create(client, &zdwl_ipc_output_v1_interface, wl_resource_get_version(resource), id);
+    if (!resource) {
+        wl_client_post_no_memory(client);
+        return;
+    }
+
+    ipc_output = ecalloc(1, sizeof(*ipc_output));
+    ipc_output->resource = output_resource;
+    ipc_output->monitor = monitor;
+
+    wl_resource_set_implementation(output_resource, &dwl_ipc_output_implementation, ipc_output, dwl_ipc_output_destroy);
+    wl_list_insert(&monitor->dwl_ipc_outputs, &ipc_output->link);
+    dwl_ipc_output_printstatus_to(ipc_output);
+}
+
+void dwl_ipc_manager_release(struct wl_client *client, struct wl_resource *resource) {
+    wl_resource_destroy(resource);
+}
+
+void dwl_ipc_output_destroy(struct wl_resource *resource) {
+    DwlIpcOutput *ipc_output = wl_resource_get_user_data(resource);
+    if (!ipc_output)
+        return;
+
+    wl_list_remove(&ipc_output->link);
+    free(ipc_output);
+}
+
+void dwl_ipc_output_printstatus(Monitor *monitor) {
+    DwlIpcOutput *ipc_output;
+    wl_list_for_each(ipc_output, &monitor->dwl_ipc_outputs, link)
+        dwl_ipc_output_printstatus_to(ipc_output);
+}
+
+void dwl_ipc_output_printstatus_to(DwlIpcOutput *ipc_output) {
+    Monitor *monitor = ipc_output->monitor;
+    Client *c, *focused;
+    int tagmask, state, numclients, focused_client, tag;
+    const char *title, *appid;
+    focused = focustop(monitor);
+    zdwl_ipc_output_v1_send_active(ipc_output->resource, monitor == selmon);
+
+    for ( tag = 0 ; tag < LENGTH(tags); tag++) {
+        numclients = state = focused_client = 0;
+        tagmask = 1 << tag;
+        if ((tagmask & monitor->tagset[monitor->seltags]) != 0)
+            state |= ZDWL_IPC_OUTPUT_V1_TAG_STATE_ACTIVE;
+
+        wl_list_for_each(c, &clients, link) {
+            if (c->mon != monitor)
+                continue;
+            if (!(c->tags & tagmask))
+                continue;
+            if (c == focused)
+                focused_client = 1;
+            if (c->isurgent)
+                state |= ZDWL_IPC_OUTPUT_V1_TAG_STATE_URGENT;
+
+            numclients++;
+        }
+        zdwl_ipc_output_v1_send_tag(ipc_output->resource, tag, state, numclients, focused_client);
+    }
+    title = focused ? client_get_title(focused) : "";
+
+    zdwl_ipc_output_v1_send_layout(ipc_output->resource, monitor->lt[monitor->sellt] - layouts);
+    zdwl_ipc_output_v1_send_title(ipc_output->resource, title ? title : broken);
+    if (wl_resource_get_version(ipc_output->resource) >= ZDWL_IPC_OUTPUT_V1_APPID_SINCE_VERSION) { /* Don't break clients using version 1 */
+        appid = focused ? client_get_appid(focused) : "";
+        zdwl_ipc_output_v1_send_appid(ipc_output->resource, appid ? appid : broken);
+    }
+    if (wl_resource_get_version(ipc_output->resource) >= ZDWL_IPC_OUTPUT_V1_LAYOUT_SYMBOL_SINCE_VERSION) /* Don't break clients using version 2 or below */
+        zdwl_ipc_output_v1_send_layout_symbol(ipc_output->resource, monitor->ltsymbol);
+    if (wl_resource_get_version(ipc_output->resource) >= ZDWL_IPC_OUTPUT_V1_FULLSCREEN_SINCE_VERSION) {
+        zdwl_ipc_output_v1_send_fullscreen(ipc_output->resource, focused ? focused->isfullscreen : 0);
+    }
+    if (wl_resource_get_version(ipc_output->resource) >= ZDWL_IPC_OUTPUT_V1_FLOATING_SINCE_VERSION) {
+        zdwl_ipc_output_v1_send_floating(ipc_output->resource, focused ? focused->isfloating : 0);
+    }
+    zdwl_ipc_output_v1_send_frame(ipc_output->resource);
+}
+
+void dwl_ipc_output_set_client_tags(struct wl_client *client, struct wl_resource *resource, uint32_t and_tags, uint32_t xor_tags) {
+    DwlIpcOutput *ipc_output;
+    Client *selected_client;
+    unsigned int newtags;
+
+    ipc_output = wl_resource_get_user_data(resource);
+    if (!ipc_output)
+        return;
+
+    selected_client = focustop(ipc_output->monitor);
+    if (!selected_client)
+        return;
+
+    newtags = (selected_client->tags & and_tags) ^ xor_tags;
+    if (!newtags)
+        return;
+
+    selected_client->tags = newtags;
+    focusclient(focustop(selmon), 1);
+    arrange(selmon);
+    printstatus();
+}
+
+void dwl_ipc_output_set_layout(struct wl_client *client, struct wl_resource *resource, uint32_t index) {
+    DwlIpcOutput *ipc_output;
+    Monitor *monitor;
+
+    ipc_output = wl_resource_get_user_data(resource);
+    if (!ipc_output)
+        return;
+
+    monitor = ipc_output->monitor;
+    if (index >= LENGTH(layouts))
+        return;
+    if (index != monitor->lt[monitor->sellt] - layouts)
+        monitor->sellt ^= 1;
+
+    monitor->lt[monitor->sellt] = &layouts[index];
+    arrange(monitor);
+    printstatus();
+}
+
+void dwl_ipc_output_set_tag(struct wl_client *client, struct wl_resource *resource, uint32_t tagmask, uint32_t toggle_tagset) {
+    DwlIpcOutput *ipc_output;
+    Monitor *monitor;
+    unsigned int newtags = tagmask & TAGMASK;
+
+    ipc_output = wl_resource_get_user_data(resource);
+    if (!ipc_output)
+        return;
+    monitor = ipc_output->monitor;
+
+    if (!newtags)
+        return;
+    if (toggle_tagset)
+        monitor->seltags ^= 1;
+    if (newtags == monitor->tagset[monitor->seltags]) {
+        if (toggle_tagset)
+            monitor->seltags ^= 1;
+        return;
+    }
+
+    monitor->tagset[monitor->seltags] = newtags;
+    focusclient(focustop(monitor), 1);
+    arrange(monitor);
+    printstatus();
+}
+
+void dwl_ipc_output_release(struct wl_client *client, struct wl_resource *resource) {
+    wl_resource_destroy(resource);
+}
+
 void
 focusclient(Client *c, int lift)
 {
@@ -1857,6 +2059,7 @@ printstatus(void)
 		printf("%s tags %u %u %u %u\n", m->wlr_output->name, occ, m->tagset[m->seltags],
 				sel, urg);
 		printf("%s layout %s\n", m->wlr_output->name, m->ltsymbol);
+        dwl_ipc_output_printstatus(m);
 	}
 	fflush(stdout);
 }
@@ -2294,6 +2497,7 @@ setup(void)
 	wl_signal_add(&output_mgr->events.test, &output_mgr_test);
 
 	wlr_scene_set_presentation(scene, wlr_presentation_create(dpy, backend));
+    wl_global_create(dpy, &zdwl_ipc_manager_v1_interface, 4, NULL, dwl_ipc_manager_bind);
 
 #ifdef XWAYLAND
 	/*
@@ -2435,6 +2639,12 @@ toggleview(const Arg *arg)
 	printstatus();
 }
 
+void toggle_visibility(const Arg *arg) {
+    DwlIpcOutput *ipc_output;
+    wl_list_for_each(ipc_output, &selmon->dwl_ipc_outputs, link)
+        zdwl_ipc_output_v1_send_toggle_visibility(ipc_output->resource);
+}
+
 void
 unlocksession(struct wl_listener *listener, void *data)
 {
diff --git a/protocols/dwl-ipc-unstable-v1.xml b/protocols/dwl-ipc-unstable-v1.xml
new file mode 100644
index 000000000..2b7c2d27b
--- /dev/null
+++ b/protocols/dwl-ipc-unstable-v1.xml
@@ -0,0 +1,183 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+This is largely ripped from somebar's ipc patchset; just with some personal modifications.
+I would probably just submit raphi's patchset but I don't think that would be polite.
+-->
+<protocol name="dwl_ipc_unstable_v1">
+  <description summary="inter-proccess-communication about dwl's state">
+      This protocol allows clients to get updates from dwl and vice versa.
+
+      Warning! The protocol described in this file is experimental and
+      backward incompatible changes may be made. Backward compatible
+      changes may be added together with the corresponding interface
+      version bump.
+      Backward incompatible changes are done by bumping the version
+      number in the protocol and interface names and resetting the
+      interface version. Once the protocol is to be declared stable,
+      the 'z' prefix and the version number in the protocol and
+      interface names are removed and the interface version number is
+      reset.
+  </description>
+
+  <interface name="zdwl_ipc_manager_v1" version="4">
+    <description summary="manage dwl state">
+      This interface is exposed as a global in wl_registry.
+
+      Clients can use this interface to get a dwl_output.
+      After binding the client will revieve dwl_manager.tag and dwl_manager.layout events.
+      The dwl_manager.tag and dwl_manager.layout events expose tags and layouts to the client.
+    </description>
+
+    <request name="release" type="destructor">
+      <description summary="release dwl_manager">
+        Indicates that the client will not the dwl_manager object anymore.
+        Objects created through this instance are not affected.
+      </description>
+    </request>
+
+    <request name="get_output">
+      <description summary="get a dwl_output for a wl_output">
+        Get a dwl_output for the specified wl_output.
+      </description>
+      <arg name="id" type="new_id" interface="zdwl_ipc_output_v1"/>
+      <arg name="output" type="object" interface="wl_output"/>
+    </request>
+
+    <event name="tag">
+      <description summary="Announces a tag">
+        This event is sent after binding.
+        A roundtrip after binding guarantees the client recieved all tags.
+      </description>
+      <arg name="name" type="string"/>
+    </event>
+
+    <event name="layout">
+      <description summary="Announces a layout">
+        This event is sent after binding.
+        A roundtrip after binding guarantees the client recieved all layouts.
+      </description>
+      <arg name="name" type="string"/>
+    </event>
+  </interface>
+
+  <interface name="zdwl_ipc_output_v1" version="4">
+    <description summary="control dwl output">
+      Observe and control a dwl output.
+
+      Events are double-buffered:
+      Clients should cache events and redraw when a dwl_output.done event is sent.
+
+      Request are not double-buffered:
+      The compositor will update immediately upon request.
+    </description>
+
+    <enum name="tag_state">
+      <entry name="none" value="0" summary="no state"/>
+      <entry name="active" value="1" summary="tag is active"/>
+      <entry name="urgent" value="2" summary="tag has at least one urgent client"/>
+    </enum>
+
+    <request name="release" type="destructor">
+      <description summary="release dwl_output">
+        Indicates to that the client no longer needs this dwl_output.
+      </description>
+    </request>
+
+    <event name="toggle_visibility">
+      <description summary="Toggle client visibilty">
+        Indicates the client should hide or show themselves.
+        If the client is visible then hide, if hidden then show.
+      </description>
+    </event>
+
+    <event name="active">
+      <description summary="Update the selected output.">
+        Indicates if the output is active. Zero is invalid, nonzero is valid.
+      </description>
+      <arg name="active" type="uint"/>
+    </event>
+
+    <event name="tag">
+      <description summary="Update the state of a tag.">
+        Indicates that a tag has been updated.
+      </description>
+      <arg name="tag" type="uint" summary="Index of the tag"/>
+      <arg name="state" type="uint" enum="tag_state" summary="The state of the tag."/>
+      <arg name="clients" type="uint" summary="The number of clients in the tag."/>
+      <arg name="focused" type="uint" summary="If there is a focused client. Nonzero being valid, zero being invalid."/>
+    </event>
+
+    <event name="layout">
+      <description summary="Update the layout.">
+        Indicates a new layout is selected.
+      </description>
+      <arg name="layout" type="uint" summary="Index of the layout."/>
+    </event>
+
+    <event name="title">
+      <description summary="Update the title.">
+        Indicates the title has changed.
+      </description>
+      <arg name="title" type="string" summary="The new title name."/>
+    </event>
+
+    <event name="frame">
+      <description summary="The update sequence is done.">
+        Indicates that a sequence of status updates have finished and the client should redraw.
+      </description>
+    </event>
+
+    <request name="set_layout">
+      <description summary="Set the layout of this output"/>
+      <arg name="index" type="uint" summary="index of a layout recieved by dwl_manager.layout"/>
+    </request>
+
+    <request name="set_tags">
+      <description summary="Set the active tags of this output"/>
+      <arg name="tagmask" type="uint" summary="bitmask of the tags that should be set."/>
+      <arg name="toggle_tagset" type="uint" summary="toggle the selected tagset, zero for invalid, nonzero for valid."/>
+    </request>
+
+    <request name="set_client_tags">
+      <description summary="Set the tags of the focused client.">
+        The tags are updated as follows:
+        new_tags = (current_tags AND and_tags) XOR xor_tags
+      </description>
+      <arg name="and_tags" type="uint"/>
+      <arg name="xor_tags" type="uint"/>
+    </request>
+
+    <!-- Version 2 -->
+    <event name="appid" since="2">
+      <description summary="Update the appid.">
+        Indicates the appid has changed.
+      </description>
+      <arg name="appid" type="string" summary="The new appid."/>
+    </event>
+
+    <!-- Version 3 -->
+    <event name="layout_symbol" since="3">
+      <description summary="Update the current layout symbol">
+          Indicates the layout has changed. Since layout symbols are now dynamic.
+          As opposed to the zdwl_manager_v1.layout event, this should take precendence when displaying.
+          This also means ignoring the zdwl_output_v1.layout event.
+      </description>
+      <arg name="layout" type="string" summary="The new layout"/>
+    </event>
+
+    <!-- Version 4 -->
+    <event name="fullscreen" since="4">
+      <description summary="Update fullscreen status">
+          Indicates if the selected client on this output is fullscreen.
+      </description>
+      <arg name="is_fullscreen" type="uint" summary="If the selected client is fullscreen. Nonzero is valid, zero invalid"/>
+    </event>
+
+    <event name="floating" since="4">
+      <description summary="Update the floating status">
+          Indicates if the selected client on this output is floating.
+      </description>
+      <arg name="is_floating" type="uint" summary="If the selected client is floating. Nonzero is valid, zero invalid"/>
+    </event>
+  </interface>
+</protocol>
