;; The default is 800 kilobytes.  Measured in bytes.
#+TITLE: init.el
#+PROPERTY: header-args :tangle init.el
* emacs startup
** shift theme variables to ~custom.el~, make sure to create it if it does not exist
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src
** emacs startup performance
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		      (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

* Initialize package sources
** Package.el
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
** straight.el: make sure to later remove package.el
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
 
(straight-use-package 'use-package) ; make sure use package is installed 
(use-package el-patch
  :straight t)                   ;and now we will have use package here
#+end_src
note: Users of Emacs versions >= 27 will want to add:
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src
* Customizing the appearence
** theme
#+begin_src emacs-lisp
 (use-package dracula-theme)
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-dracula t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
  ;(load-theme 'dracula t)

#+end_src

** Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "Hack 11"
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Hack 11"
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Hack 11"
  :weight 'medium)
;; Makes commented text italics (working in emacsclient but not emacs)
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
;; Makes keywords italics (working in emacsclient but not emacs)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)

;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
(add-to-list 'default-frame-alist '(font . "Hack 11"))
;; changes certain keywords to symbols, such as lamda!
(setq global-prettify-symbols-mode t)

#+end_src

#+begin_src emacs-lisp
 ;; auto-updating emacs
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))

;; adding some of my favourite pkgs
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package command-log-mode
  :commands command-log-mode)

#+end_src
* Org mode: 
** snippets:
*** ya-snippet
#+begin_src emacs-lisp
(use-package yasnippet) 
#+end_src
*** doom snippets
see  https://github.com/hlissner/doom-snippets
#+begin_src emacs-lisp
(use-package doom-snippets
  :load-path "~/.emacs.d/repos/doom-snippets"
  :after yasnippet)
#+end_src
** org tempo for all the beautiful snippets: 
#+begin_src emacs-lisp
; (straight-use-package 'org-tempo)
 (require 'org-tempo)
#+end_src
** Superstar for some pretty symbols 
   #+begin_src emacs-lisp
   (straight-use-package 'org-superstar)
   (require 'org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
   #+end_src

* Language and completion support 
** completion engines:
*** company mode
   #+begin_src emacs-lisp
   (straight-use-package 'company) 
(add-hook 'after-init-hook 'global-company-mode)
   #+end_src
** lsp-mode
*** General Setup 
   #+begin_src emacs-lisp
(straight-use-package 'flycheck)
   (straight-use-package 'lsp-mode)
   (straight-use-package 'lsp-ui)
   #+end_src
*** python
    #+begin_src emacs-lisp
(use-package lsp-python-ms
  :straight t
  :ensure t
  :init (setq lsp-python-ms-auto-install-server t) 
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
    #+end_src
** which key
   #+begin_src emacs-lisp
   (straight-use-package 'which-key)
   #+end_src
