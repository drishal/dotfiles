#+TITLE: zshrc
#+PROPERTY: header-args:shell :tangle ~/.zshrc
* table of contents :toc:
- [[#tramp-fix][tramp fix]]
- [[#zinit][zinit]]
  - [[#added-by-zinits-installer][Added by zinit's installer]]
- [[#initial-setup][initial setup]]
- [[#qt5ct][qt5ct]]
- [[#some-stuff-configure-by-zsh-newuser-install][Some stuff configure by zsh-newuser-install]]
- [[#setting-some-paths][Setting some paths]]
  - [[#localbin][~~/.local/bin~]]
  - [[#ccache-settings][ccache settings]]
- [[#setting-some-values-we-will-need-from-grml-zsh-config][Setting some values we will need from Grml zsh config]]
- [[#completion-stuff-from-grml][completion stuff from grml]]
- [[#plugins][Plugins]]
  - [[#zsh-completions][zsh-completions]]
  - [[#zsh-autosuggestions][zsh-autosuggestions]]
  - [[#zsh-autocomplete][zsh autocomplete]]
  - [[#zsh-syntax-highlighting][zsh-syntax-highlighting]]
  - [[#zsh-history-substring-search][zsh-history substring search]]
  - [[#disable-the-prompt-on-the-right-side][Disable the prompt on the right side]]
  - [[#vim-mode][vim mode]]
  - [[#async][async]]
  - [[#zsh-nix-shell][zsh-nix-shell]]
- [[#history-completions][History completions]]
- [[#navigation][Navigation]]
- [[#grml-zsh-config][Grml Zsh config]]
- [[#title][title]]
- [[#kitty-config][kitty config]]
- [[#loading-the-prompt][loading the prompt]]
  - [[#starship][Starship]]
  - [[#p10k][p10k]]
  - [[#custom-2][custom 2]]
  - [[#custom][custom]]
  - [[#agkozak][agkozak]]
- [[#loading-the-profile][loading the ~~/.profile~]]
- [[#pfetch][pfetch]]
- [[#direnv][direnv]]
- [[#some-misc-exports][some misc exports]]
  - [[#terminfo-stull][Terminfo stull]]
  - [[#load-angluar-cli-completions][Load Angluar cli completions]]

* tramp fix
#+begin_src shell
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return
#+end_src
* zinit
to install copy-paste this into the terminal
#+begin_src shell :tangle no
sh -c "$(curl -fsSL https://git.io/zinit-install)"
#+end_src
** Added by zinit's installer
#+begin_src shell
# zplug load
### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

#+end_src

* initial setup
make sure you execute these commands if you do not plan to use any plugin manager 
#+begin_src shell :tangle no
mkdir ~/.zsh-plugins
cd ~/.zsh-plugins
git clone https://github.com/zsh-users/zsh-completions.git
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
git clone https://github.com/zsh-users/zsh-autosuggestions.git
git clone https://github.com/jeffreytse/zsh-vi-mode.git
git clone https://github.com/zsh-users/zsh-history-substring-search.git
#+end_src

* qt5ct
#+begin_src shell :tangle no
# if [[ "$DESKTOP_SESSION" = *"plasma"* ]]; then
#     export QT_QPA_PLATFORMTHEME = "kde"
# fi

# if [[ "$DESKTOP_SESSION" != *"plasma"* ]]; then
#     export QT_QPA_PLATFORMTHEME="qt5ct"
# fi

#+end_src 
* Some stuff configure by zsh-newuser-install
#+begin_src shell
  zstyle :compinstall filename '/home/drishal/.zshrc'
  autoload -Uz compinit
  compinit
#+end_src

* Setting some paths
** ~~/.local/bin~
#+begin_src shell
  if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]
  then
      PATH="$HOME/.local/bin:$HOME/bin:$PATH"
  fi
  autoload -U colors && colors
  export PATH
#+end_src
** ccache settings
#+begin_src shell
export USE_CCACHE=1
# export CCACHE_EXEC=/usr/bin/ccache
# export CCACHE_DIR=/home/drishal/.ccache-1
#+end_src

* Setting some values we will need from Grml zsh config
#+begin_src shell

  # set some important options (as early as possible)

  # append history list to the history file; this is the default but we make sure
  # because it's required for share_history.
  setopt append_history

  # import new commands from the history file also in other zsh-session
  setopt share_history

  # save each command's beginning timestamp and the duration to the history file
  setopt extended_history

  # If a new command line being added to the history list duplicates an older
  # one, the older command is removed from the list
  setopt histignorealldups

  # remove command lines from the history list when the first character on the
  # line is a space
  setopt histignorespace

  # if a command is issued that can't be executed as a normal command, and the
  # command is the name of a directory, perform the cd command to that directory.
  setopt auto_cd

  # in order to use #, ~ and ^ for filename generation grep word
  # *~(*.gz|*.bz|*.bz2|*.zip|*.Z) -> searches for word not in compressed files
  # don't forget to quote '^', '~' and '#'!
  setopt extended_glob

  # display PID when suspending processes as well
  setopt longlistjobs

  # report the status of backgrounds jobs immediately
  setopt notify

  # whenever a command completion is attempted, make sure the entire command path
  # is hashed first.
  setopt hash_list_all

  # not just at the end
  setopt completeinword

  # Don't send SIGHUP to background processes when the zsh exits.
  setopt nohup

  # make cd push the old directory onto the directory stack.
  setopt auto_pushd

  # avoid "beep"ing
  setopt nobeep

  # don't push the same dir twice.
  setopt pushd_ignore_dups

  # * shouldn't match dotfiles. ever.
  setopt noglobdots

  # use zsh style word splitting
  setopt noshwordsplit

  # don't error out when unset parameters are used
  setopt unset

#+end_src

* completion stuff from grml
#+begin_src shell
  # TODO: This could use some additional information

  # Make sure the completion system is initialised
  (( ${+_comps} )) || return 1

  # allow one error for every three characters typed in approximate completer
  zstyle ':completion:*:approximate:'    max-errors 'reply=( $((($#PREFIX+$#SUFFIX)/3 )) numeric )'

  # don't complete backup files as executables
  zstyle ':completion:*:complete:-command-::commands' ignored-patterns '(aptitude-*|*\~)'

  # start menu completion only if it could find no unambiguous initial string
  zstyle ':completion:*:correct:*'       insert-unambiguous true
  zstyle ':completion:*:corrections'     format $'%{\e[0;31m%}%d (errors: %e)%{\e[0m%}'
  zstyle ':completion:*:correct:*'       original true

  # activate color-completion
  zstyle ':completion:*:default'         list-colors ${(s.:.)LS_COLORS}

  # format on completion
  zstyle ':completion:*:descriptions'    format $'%{\e[0;31m%}completing %B%d%b%{\e[0m%}'

  # automatically complete 'cd -<tab>' and 'cd -<ctrl-d>' with menu
  # zstyle ':completion:*:*:cd:*:directory-stack' menu yes select

  # insert all expansions for expand completer
  zstyle ':completion:*:expand:*'        tag-order all-expansions
  zstyle ':completion:*:history-words'   list false

  # activate menu
  zstyle ':completion:*:history-words'   menu yes

  # ignore duplicate entries
  zstyle ':completion:*:history-words'   remove-all-dups yes
  zstyle ':completion:*:history-words'   stop yes

  # match uppercase from lowercase
  zstyle ':completion:*'                 matcher-list 'm:{a-z}={A-Z}'

  # separate matches into groups
  zstyle ':completion:*:matches'         group 'yes'
  zstyle ':completion:*'                 group-name ''

  if [[ "$NOMENU" -eq 0 ]] ; then
      # if there are more than 5 options allow selecting from a menu
      zstyle ':completion:*'               menu select=5
  else
      # don't use any menus at all
      setopt no_auto_menu
  fi

  zstyle ':completion:*:messages'        format '%d'
  zstyle ':completion:*:options'         auto-description '%d'

  # describe options in full
  zstyle ':completion:*:options'         description 'yes'

  # on processes completion complete all user processes
  zstyle ':completion:*:processes'       command 'ps -au$USER'

  # offer indexes before parameters in subscripts
  zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

  # provide verbose completion information
  zstyle ':completion:*'                 verbose true

  # recent (as of Dec 2007) zsh versions are able to provide descriptions
  # for commands (read: 1st word in the line) that it will list for the user
  # to choose from. The following disables that, because it's not exactly fast.
  zstyle ':completion:*:-command-:*:'    verbose false

  # set format for warnings
  zstyle ':completion:*:warnings'        format $'%{\e[0;31m%}No matches for:%{\e[0m%} %d'

  # define files to ignore for zcompile
  zstyle ':completion:*:*:zcompile:*'    ignored-patterns '(*~|*.zwc)'
  zstyle ':completion:correct:'          prompt 'correct to: %e'

  # Ignore completion functions for commands you don't have:
  zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'

  # Provide more processes in completion of programs like killall:
  zstyle ':completion:*:processes-names' command 'ps c -u ${USER} -o command | uniq'

  # complete manual by their section
  zstyle ':completion:*:manuals'    separate-sections true
  zstyle ':completion:*:manuals.*'  insert-sections   true
  zstyle ':completion:*:man:*'      menu yes select
#+end_src

* Plugins
*** Oh my zsh
The oh my zsh framework, tangle set to no as I dont really use it 
#+begin_src shell :tangle no
zinit light "ohmyzsh/ohmyzsh"
#+end_src

** zsh-completions
see https://github.com/zsh-users/zsh-completions
#+begin_src shell :tangle no 
  #source ~/.zsh-plugins/zsh-completions/zsh-completions.plugin.zsh
  zinit light "zsh-users/zsh-completions"
#+end_src
** zsh-autosuggestions
- install from here: https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md
#+begin_src shell
  #  source ~/.zsh-plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
export ZSH_AUTOSUGGEST_USE_ASYNC=true
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#6272a4'

# zinit wait lucid for \
#  atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
#     zdharma-continuum/fast-syntax-highlighting \
#  atload"!_zsh_autosuggest_start" \
#     zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-autosuggestions
#+end_src
** zsh autocomplete
#+begin_src shell :tangle no
  zinit light "marlonrichert/zsh-autocomplete"
#+end_src

** zsh-syntax-highlighting
- see: https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md
#+begin_src shell
  # source ~/.zsh-plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
  zinit light "zsh-users/zsh-syntax-highlighting"
#+end_src
** zsh-history substring search
- see: https://github.com/zsh-users/zsh-history-substring-search
  #+begin_src shell
    #source /home/drishal/.zsh-plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
    zinit light "zsh-users/zsh-history-substring-search"
  #+end_src


** Disable the prompt on the right side
#+begin_src shell
  #export RPROMPT=$DATE
#+end_src
** vim mode
see https://github.com/jeffreytse/zsh-vi-mode
#+begin_src shell :tangle no
  # source ~/.zsh-plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh
 zinit light "jeffreytse/zsh-vi-mode"
#+end_src
** async
#+begin_src shell 
  zinit light mafredri/zsh-async
#+end_src
** zsh-nix-shell
#+begin_src shell
zinit light chisui/zsh-nix-shell
#+end_src
* History completions
#+begin_src shell
  HISTFILE=${HISTFILE:-${ZDOTDIR:-${HOME}}/.zsh_history}
  HISTSIZE=500  || HISTSIZE=5000
  SAVEHIST=1000 || SAVEHIST=10000 
#+end_src

* Navigation
#+begin_src shell
  bindkey "^[[1;5C" forward-word
  bindkey "^[[1;5D" backward-word
#+end_src

* Grml Zsh config
https://git.grml.org/?p=grml-etc-core.git;a=blob_plain;f=etc/zsh/zshrc;hb=HEAD

* title
#+begin_src shell 
  DISABLE_AUTO_TITLE="false"
  zinit load trystan2k/zsh-tab-title
  ZSH_TAB_TITLE_ADDITIONAL_TERMS='alacritty|kitty|foot'
#+end_src

* kitty config
#+begin_src shell
export KITTY_SHELL_INTEGRATION=no-cursor
#+end_src

* loading the prompt
you can use any of the prompts here, just make sure to remove ~:tangle no~ from whatever prompt you prefer (and also dont forget to add ~:tangle no~ to the ones which you are not using)
** Starship
#+begin_src shell 
eval "$(starship init zsh)"
export STARSHIP_CONFIG=~/dotfiles/config/starship.toml
precmd() {
    precmd() {
        echo
    }
}
#+end_src
** p10k
#+begin_src shell :tangle no
zinit ice depth=1; zinit light romkatv/powerlevel10k
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#+end_src
** custom 2
#+begin_src shell :tangle no 
# Autoload zsh add-zsh-hook and vcs_info functions (-U autoload w/o substition, -z use zsh style)
autoload -Uz add-zsh-hook vcs_info
# Enable substitution in the prompt.
# precmd() { print "" }
# print a blank line before the prompt except the first line
precmd() {
    precmd() {
        echo
    }
}
setopt prompt_subst
zstyle ':vcs_info:git:*' formats ' on branch %b '
# Run vcs_info just before a prompt is displayed (precmd)
add-zsh-hook precmd vcs_info
PS1='%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[green]%}%M %{$fg[blue]%}%~%{$fg[red]%}%{$fg[magenta]%}${vcs_info_msg_0_}%{$fg[red]%}]%{$reset_color%} $%b '
# PS1=' %F{red}${vcs_info_msg_0_}%f '
#+end_src

** custom
https://www.tweaking4all.com/software/macosx-software/customize-zsh-prompt/
what do different values mean
| %l | The TTY device you’re using, strips “/dev/” or “/dev/tty” | Note: Lowercase letter “L”                                          |
| %M | Full hostname                                             |                                                                     |
| %m | Hostname up until the first dot                           | A number after ‘%m’ will indicated how many dots should be included |
| %n | Username                                                  | The user that is logged in                                          |
| %y | Same as “%l” just does not strip “/dev” or “/dev/tty”     |                                                                     |
	
#+begin_src shell :tangle no
 PROMPT='%F{green}%n@%F{white}%M %B%3~ > '
 PROMPT='%F{green}%3~ > '
#+end_src
** agkozak
https://github.com/agkozak/agkozak-zsh-prompt
#+begin_src shell :tangle no
zinit light agkozak/agkozak-zsh-prompt
AGKOZAK_PROMPT_CHAR=( '%F{green}❯%f' '%F{green}❯%f' '%F{green}❮%f' )
AGKOZAK_LEFT_PROMPT_ONLY=1
AGKOZAK_MULTILINE=0
AGKOZAK_USER_HOST_DISPLAY=0
AGKOZAK_COLORS_BRANCH_STATUS=magenta
AGKOZAK_CUSTOM_RPROMPT='%()'
AGKOZAK_BLANK_LINES=1
#+end_src

* loading the ~~/.profile~
#+begin_src shell 
  source ~/dotfiles/.profile
#+end_src

* pfetch
#+begin_src shell :tangle no
 pfetch 
#+end_src

* direnv
#+begin_src shell
eval "$(direnv hook zsh)"
#+end_src

* some misc exports
** Terminfo stull
#+begin_src shell :tangle no
 export TERMINFO_DIRS=/usr/share/terminfo
#+end_src
** Load Angluar cli completions
#+begin_src shell :tangle no
source <(ng completion script)
#+end_src
