#+TITLE: Awesome Config
#+PROPERTY: header-args :tangle ~/.config/awesome/rc.lua
* Table of Contents :toc:
- [[#init][Init]]
- [[#error-handling][Error Handling]]
- [[#variable-definitions][Variable definitions]]
  - [[#theme-init][Theme init]]
  - [[#apps][Apps]]
  - [[#modkey][modkey]]
  - [[#layouts][layouts]]
- [[#wibar][wibar]]
  - [[#clock-widget][clock widget]]
  -  [[#create-a-wibox-for-each-screen-and-add-it][Create a wibox for each screen and add it]]

* Init 
#+begin_src lua
pcall(require, "luarocks.loader")

-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")

-- Widget and layout library
local wibox = require("wibox")

-- Theme handling library
local beautiful = require("beautiful")

-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")
local hotkeys_popup = require("awful.hotkeys_popup")

-- Enable hotkeys help widget for VIM and other apps
-- when client with a matching name is opened:
require("awful.hotkeys_popup.keys")

#+end_src

* Error Handling
- Check if awesome encountered an error during startup and fell back to
another config (This code will only ever execute for the fallback config)
#+begin_src lua

if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

#+end_src


- Handle runtime errors after startup

#+begin_src lua
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
#+end_src

* Variable definitions
** Theme init
#+begin_src lua
beautiful.init(gears.filesystem.get_themes_dir() .. "default/theme.lua")
#+end_src
** Apps
#+begin_src lua
terminal = "alacritty"
editor = os.getenv("EDITOR") or "emacsclient -c"
-- editor_cmd = terminal .. " -e " .. editor
editor_cmd = "emacsclient -c"
#+end_src
** modkey
#+begin_src lua
modkey = "Mod4"
#+end_src
** layouts
#+begin_src lua
awful.layout.layouts = {
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    -- awful.layout.suit.tile.left,
    -- awful.layout.suit.tile.bottom,
    -- awful.layout.suit.tile.top,
    -- awful.layout.suit.fair,
    -- awful.layout.suit.fair.horizontal,
    -- awful.layout.suit.spiral,
    -- awful.layout.suit.spiral.dwindle,
    -- awful.layout.suit.max,
    -- awful.layout.suit.max.fullscreen,
    -- awful.layout.suit.magnifier,
    -- awful.layout.suit.corner.nw,
    -- awful.layout.suit.corner.ne,
    -- awful.layout.suit.corner.sw,
    -- awful.layout.suit.corner.se,
}
#+end_src
* wibar
** clock widget
#+begin_src lua
mytextclock = wibox.widget.textclock()
#+end_src
**  Create a wibox for each screen and add it
#+begin_src lua
local taglist_buttons = gears.table.join(
                    awful.button({ }, 1, function(t) t:view_only() end),
                    awful.button({ modkey }, 1, function(t)
                                              if client.focus then
                                                  client.focus:move_to_tag(t)
                                              end
                                          end),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, function(t)
                                              if client.focus then
                                                  client.focus:toggle_tag(t)
                                              end
                                          end),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
                )

local tasklist_buttons = gears.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  c:emit_signal(
                                                      "request::activate",
                                                      "tasklist",
                                                      {raise = true}
                                                  )
                                              end
                                          end),
                     awful.button({ }, 3, function()
                                              awful.menu.client_list({ theme = { width = 250 } })
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                          end))
#+end_src

